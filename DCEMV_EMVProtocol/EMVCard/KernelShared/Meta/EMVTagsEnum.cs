/*
*************************************************************************
DC EMV
Open Source EMV
Copyright (C) 2018  Vicente Da Silva

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see http://www.gnu.org/licenses/
*************************************************************************
*/
using DataFormatters;
using System.Collections.Generic;

namespace DCEMV.EMVProtocol.Kernels
{
    public enum UpdatePermissionEnum
    {
        NONE,
        K,
        ACT,
        DET,
        RA
    }
    public class EMVTagsEnum
    {
        private static List<EMVTagMeta> EnumList = new List<EMVTagMeta>();
        public static DataKernelID DataKernelID { get; set; }

        #region Added
        public static EMVTagMeta CARD_ADDITIONAL_PROCESSES_9F68_KRN = new EMVTagMeta(DataKernelID.KRN, "9F68", "Card Additional Processes", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta UNKNOWN_KRN = new EMVTagMeta(DataKernelID.KRN, "XXXX", "Invalid tag", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Invalid Tag");
        #endregion

        #region Entry Point
        public static EMVTagMeta EXTENDED_SELECTION_9F29_KRN = new EMVTagMeta(DataKernelID.KRN, "9F29", "Extended Selection", DataTemplate._61, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "The value to be appended to the ADF Name in the data field of the SELECT command, if the Extended Selection Support flag is present and set to 1. Content is payment system proprietary. Note: The maximum length of Extended Selection depends on the length of ADF Name in the same directory entry such that Length of Extended Selection + Length of ADF Name less tan or equal 16.");
        public static EMVTagMeta KERNEL_IDENTIFIER_9F2A_KRN = new EMVTagMeta(DataKernelID.KRN, "9F2A", "Kernel Identifier", DataTemplate._61, new DataFormatterFixedOrRange(DataFormats._BINARY, 1, 3, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the card’s preference for the kernel on which the contactless application can be processed.");
        #endregion

        #region KRN
        public static EMVTagMeta ACCOUNT_TYPE_5F57_KRN = new EMVTagMeta(DataKernelID.KRN, "5F57", "Account Type", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the type of account selected on the terminal, coded as specified in Annex G");
        public static EMVTagMeta ACQUIRER_IDENTIFIER_9F01_KRN = new EMVTagMeta(DataKernelID.KRN, "9F01", "Acquirer Identifier", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Uniquely identifies the acquirer within each payment system");
        public static EMVTagMeta ADDITIONAL_TERMINAL_CAPABILITIES_9F40_KRN = new EMVTagMeta(DataKernelID.KRN, "9F40", "Additional Terminal Capabilities", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the data input and output capabilities of the terminal");
        public static EMVTagMeta AMOUNT_AUTHORISED_BINARY_81_KRN = new EMVTagMeta(DataKernelID.KRN, "81", "Amount, Authorised (Binary)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Authorised amount of the transaction (excluding adjustments)");
        public static EMVTagMeta AMOUNT_AUTHORISED_NUMERIC_9F02_KRN = new EMVTagMeta(DataKernelID.KRN, "9F02", "Amount, Authorised (Numeric)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Authorised amount of the transaction (excluding adjustments)");
        public static EMVTagMeta AMOUNT_OTHER_BINARY_9F04_KRN = new EMVTagMeta(DataKernelID.KRN, "9F04", "Amount, Other (Binary)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Secondary amount associated with the transaction representing a cashback amount");
        public static EMVTagMeta AMOUNT_OTHER_NUMERIC_9F03_KRN = new EMVTagMeta(DataKernelID.KRN, "9F03", "Amount, Other (Numeric)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Secondary amount associated with the transaction representing a cashback amount");
        public static EMVTagMeta AMOUNT_REFERENCE_CURRENCY_9F3A_KRN = new EMVTagMeta(DataKernelID.KRN, "9F3A", "Amount, Reference Currency", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Authorised amount expressed in the reference currency");
        public static EMVTagMeta APPLICATION_CRYPTOGRAM_9F26_KRN = new EMVTagMeta(DataKernelID.KRN, "9F26", "Application Cryptogram", DataTemplate._77_OR_80, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Cryptogram returned by the ICC in response of the GENERATE AC command");
        public static EMVTagMeta APPLICATION_CURRENCY_CODE_9F42_KRN = new EMVTagMeta(DataKernelID.KRN, "9F42", "Application Currency Code", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the currency in which the account is managed according to ISO 4217");
        public static EMVTagMeta APPLICATION_CURRENCY_EXPONENT_9F44_KRN = new EMVTagMeta(DataKernelID.KRN, "9F44", "Application Currency Exponent", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the implied position of the decimal point from the right of the amount represented according to ISO 4217");
        public static EMVTagMeta APPLICATION_DISCRETIONARY_DATA_9F05_KRN = new EMVTagMeta(DataKernelID.KRN, "9F05", "Application Discretionary Data", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 1, 32), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer or payment system specified data relating to the application");
        public static EMVTagMeta APPLICATION_EFFECTIVE_DATE_5F25_KRN = new EMVTagMeta(DataKernelID.KRN, "5F25", "Application Effective Date", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._DATE_YYMMDD, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Date from which the application may be used");
        public static EMVTagMeta APPLICATION_EXPIRATION_DATE_5F24_KRN = new EMVTagMeta(DataKernelID.KRN, "5F24", "Application Expiration Date", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._DATE_YYMMDD, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Date after which application expires");
        public static EMVTagMeta APPLICATION_FILE_LOCATOR_AFL_94_KRN = new EMVTagMeta(DataKernelID.KRN, "94", "Application File Locator (AFL)", DataTemplate._77_OR_80, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the location (SFI, range of records) of the AEFs related to a given application");
        public static EMVTagMeta APPLICATION_DEDICATED_FILE_ADF_NAME_4F_KRN = new EMVTagMeta(DataKernelID.KRN, "4F", "Application Dedicated File (ADF) Name", DataTemplate._61, new DataFormatterLengthRange(DataFormats._BINARY, 5, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the application as described in ISO/IEC 7816-5");
        public static EMVTagMeta APPLICATION_IDENTIFIER_AID_TERMINAL_9F06_KRN = new EMVTagMeta(DataKernelID.KRN, "9F06", "Application Identifier (AID) – terminal", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 5, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the application as described in ISO/IEC 7816-5");
        public static EMVTagMeta APPLICATION_INTERCHANGE_PROFILE_82_KRN = new EMVTagMeta(DataKernelID.KRN, "82", "Application Interchange Profile", DataTemplate._77_OR_80, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the capabilities of the card to support specific functions in the application");
        public static EMVTagMeta APPLICATION_LABEL_50_KRN = new EMVTagMeta(DataKernelID.KRN, "50", "Application Label", DataTemplate._61_OR_A5, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPACE, 1, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Mnemonic associated with the AID according to ISO/IEC 7816-5");
        public static EMVTagMeta APPLICATION_PREFERRED_NAME_9F12_KRN = new EMVTagMeta(DataKernelID.KRN, "9F12", "Application Preferred Name", DataTemplate._61_OR_A5, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 1, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Preferred mnemonic associated with the AID");
        public static EMVTagMeta APPLICATION_PRIMARY_ACCOUNT_NUMBER_PAN_5A_KRN = new EMVTagMeta(DataKernelID.KRN, "5A", "Application Primary Account Number (PAN)", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._CN, 0, 10), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Valid cardholder account number");
        public static EMVTagMeta APPLICATION_PRIMARY_ACCOUNT_NUMBER_PAN_SEQUENCE_NUMBER_5F34_KRN = new EMVTagMeta(DataKernelID.KRN, "5F34", "Application Primary Account Number (PAN) Sequence Number", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies and differentiates cards with the same PAN");
        public static EMVTagMeta APPLICATION_PRIORITY_INDICATOR_87_KRN = new EMVTagMeta(DataKernelID.KRN, "87", "Application Priority Indicator", DataTemplate._61_OR_A5, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the priority of a given application or group of applications in a directory");
        public static EMVTagMeta APPLICATION_REFERENCE_CURRENCY_9F3B_KRN = new EMVTagMeta(DataKernelID.KRN, "9F3B", "Application Reference Currency", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._NUMERIC, 2, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "1-4 currency codes used between the terminal and the ICC when the Transaction Currency Code is different from the Application Currency Code; each code is 3 digits according to ISO 4217");
        public static EMVTagMeta APPLICATION_REFERENCE_CURRENCY_EXPONENT_9F43_KRN = new EMVTagMeta(DataKernelID.KRN, "9F43", "Application Reference Currency Exponent", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._NUMERIC, 1, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the implied position of the decimal point from the right of the amount, for each of the 1-4 reference currencies represented according to ISO 4217");
        public static EMVTagMeta APPLICATION_SELECTION_INDICATOR_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Application Selection Indicator", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "For an application in the ICC to be supported by an application in the terminal, the Application Selection Indicator indicates whether the associated AID in the terminal must match the AID in the card exactly, including the length of the AID, or only up to the length of the AID in the terminal There is only one Application Selection Indicator per AID supported by the terminal");
        public static EMVTagMeta APPLICATION_TEMPLATE_61_KRN = new EMVTagMeta(DataKernelID.KRN, "61", "Application Template", DataTemplate._70, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains one or more data objects relevant to an application directory entry according to ISO/IEC 7816-5");
        public static EMVTagMeta APPLICATION_TRANSACTION_COUNTER_ATC_9F36_KRN = new EMVTagMeta(DataKernelID.KRN, "9F36", "Application Transaction Counter (ATC)", DataTemplate._77_OR_80, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Counter maintained by the application in the ICC (incrementing the ATC is managed by the ICC)");
        public static EMVTagMeta APPLICATION_USAGE_CONTROL_9F07_KRN = new EMVTagMeta(DataKernelID.KRN, "9F07", "Application Usage Control", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates issuer’s specified restrictions on the geographic usage and services allowed for the application");
        public static EMVTagMeta APPLICATION_VERSION_NUMBER_CARD_9F08_KRN = new EMVTagMeta(DataKernelID.KRN, "9F08", "Application Version Number Card", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Version number assigned by the payment system for the application");
        public static EMVTagMeta APPLICATION_VERSION_NUMBER_TERMINAL_9F09_KRN = new EMVTagMeta(DataKernelID.KRN, "9F09", "Application Version Number Terminal", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Version number assigned by the payment system for the application");
        public static EMVTagMeta AUTHORISATION_CODE_89_KRN = new EMVTagMeta(DataKernelID.KRN, "89", "Authorisation Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value generated by the authorisation authority for an approved transaction");
        public static EMVTagMeta AUTHORISATION_RESPONSE_CODE_8A_KRN = new EMVTagMeta(DataKernelID.KRN, "8A", "Authorisation Response Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC_SPACE, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Code that defines the disposition of a message");
        public static EMVTagMeta AUTHORISATION_RESPONSE_CRYPTOGRAM_ARPC_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Authorisation Response Cryptogram (ARPC)", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 4, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Cryptogram generated by the issuer and used by the card to verify that the response came from the issuer.");
        public static EMVTagMeta BANK_IDENTIFIER_CODE_BIC_5F54_KRN = new EMVTagMeta(DataKernelID.KRN, "5F54", "Bank Identifier Code (BIC)", DataTemplate._BF0C_OR_73, new DataFormatterLengthList(DataFormats._BINARY, 8, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Uniquely identifies a bank as defined in ISO 9362.");
        public static EMVTagMeta CARD_RISK_MANAGEMENT_DATA_OBJECT_LIST_1_CDOL1_8C_KRN = new EMVTagMeta(DataKernelID.KRN, "8C", "Card Risk Management Data Object List  1 (CDOL1)", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "List of data objects (tag and length) to be passed to the ICC in the first GENERATE AC command");
        public static EMVTagMeta CARD_RISK_MANAGEMENT_DATA_OBJECT_LIST_2_CDOL2_8D_KRN = new EMVTagMeta(DataKernelID.KRN, "8D", "Card Risk Management Data Object List 2 (CDOL2)", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "List of data objects (tag and length) to be passed to the ICC in the second GENERATE AC command");
        public static EMVTagMeta CARD_STATUS_UPDATE_CSU_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Card Status Update (CSU)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains data sent to the ICC to indicate whether the issuer approves or declines the transaction, and to initiate actions specified by the issuer. Transmitted to the card in Issuer Authentication Data.");
        public static EMVTagMeta CARDHOLDER_NAME_5F20_KRN = new EMVTagMeta(DataKernelID.KRN, "5F20", "Cardholder Name", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 2, 26), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates cardholder name according to ISO 7813");
        public static EMVTagMeta CARDHOLDER_NAME_EXTENDED_9F0B_KRN = new EMVTagMeta(DataKernelID.KRN, "9F0B", "Cardholder Name Extended", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 27, 45), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the whole cardholder name when greater than 26 characters using the same coding convention as in ISO 7813");
        public static EMVTagMeta CARDHOLDER_VERIFICATION_METHOD_CVM_LIST_8E_KRN = new EMVTagMeta(DataKernelID.KRN, "8E", "Cardholder Verification Method (CVM) List", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 10, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies a method of verification of the cardholder supported by the application");
        public static EMVTagMeta CARDHOLDER_VERIFICATION_METHOD_CVM_RESULTS_9F34_KRN = new EMVTagMeta(DataKernelID.KRN, "9F34", "Cardholder Verification Method (CVM) Results", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the results of the last CVM performed");
        public static EMVTagMeta CERTIFICATION_AUTHORITY_PUBLIC_KEY_CHECK_SUM_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Certification Authority Public Key Check Sum", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 20), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "A check value calculated on the concatenation of all parts of the Certification Authority Public Key (RID, Certification Authority Public Key Index, Certification Authority Public Key Modulus, Certification Authority Public Key Exponent) using SHA-1");
        public static EMVTagMeta CERTIFICATION_AUTHORITY_PUBLIC_KEY_EXPONENT_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Certification Authority Public Key Exponent", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 1, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value of the exponent part of the Certification Authority Public Key");
        public static EMVTagMeta CERTIFICATION_AUTHORITY_PUBLIC_KEY_INDEX_8F_KRN = new EMVTagMeta(DataKernelID.KRN, "8F", "Certification Authority Public Key Index", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the certification authority’s public key in conjunction with the RID");
        public static EMVTagMeta CERTIFICATION_AUTHORITY_PUBLIC_KEY_INDEX_9F22_KRN = new EMVTagMeta(DataKernelID.KRN, "9F22", "Certification Authority Public Key Index", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the certification authority’s public key in conjunction with the RID");
        public static EMVTagMeta CERTIFICATION_AUTHORITY_PUBLIC_KEY_MODULUS_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Certification Authority Public Key Modulus", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value of the modulus part of the Certification Authority Public Key");
        public static EMVTagMeta COMMAND_TEMPLATE_83_KRN = new EMVTagMeta(DataKernelID.KRN, "83", "Command Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the data field of a command message");
        public static EMVTagMeta CRYPTOGRAM_INFORMATION_DATA_9F27_KRN = new EMVTagMeta(DataKernelID.KRN, "9F27", "Cryptogram Information Data", DataTemplate._77_OR_80, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the type of cryptogram and the actions to be performed by the terminal");
        public static EMVTagMeta DATA_AUTHENTICATION_CODE_9F45_KRN = new EMVTagMeta(DataKernelID.KRN, "9F45", "Data Authentication Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "An issuer assigned value that is retained by the terminal during the verification process of the Signed Static Application Data");
        public static EMVTagMeta DEDICATED_FILE_DF_NAME_84_KRN = new EMVTagMeta(DataKernelID.KRN, "84", "Dedicated File (DF) Name", DataTemplate._6F, new DataFormatterLengthRange(DataFormats._BINARY, 5, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the name of the DF as described in ISO/IEC 7816-4");
        public static EMVTagMeta DEFAULT_DYNAMIC_DATA_AUTHENTICATION_DATA_OBJECT_LIST_DDOL_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Default Dynamic Data Authentication Data Object List (DDOL)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "DDOL to be used for constructing the INTERNAL AUTHENTICATE command if the DDOL in the card is not present");
        public static EMVTagMeta DEFAULT_TRANSACTION_CERTIFICATE_DATA_OBJECT_LIST_TDOL_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Default Transaction Certificate Data Object List (TDOL)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "TDOL to be used for generating the TC Hash Value if the TDOL in the card is not present");
        public static EMVTagMeta DIRECTORY_DEFINITION_FILE_DDF_NAME_9D_KRN = new EMVTagMeta(DataKernelID.KRN, "9D", "Directory Definition File (DDF) Name", DataTemplate._61, new DataFormatterLengthRange(DataFormats._BINARY, 5, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the name of a DF associated with a directory");
        public static EMVTagMeta DIRECTORY_DISCRETIONARY_TEMPLATE_73_KRN = new EMVTagMeta(DataKernelID.KRN, "73", "Directory Discretionary Template", DataTemplate._61, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer discretionary part of the directory according to ISO/IEC 7816-5");
        public static EMVTagMeta DYNAMIC_DATA_AUTHENTICATION_DATA_OBJECT_LIST_DDOL_9F49_KRN = new EMVTagMeta(DataKernelID.KRN, "9F49", "Dynamic Data Authentication Data Object List (DDOL)", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "List of data objects (tag and length) to be passed to the ICC in the INTERNAL AUTHENTICATE command");
        public static EMVTagMeta ENCIPHERED_PERSONAL_IDENTIFICATION_NUMBER_PIN_DATA_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Enciphered Personal Identification Number (PIN) Data", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Transaction PIN enciphered at the PIN pad for online verification or for offline verification if the PIN pad and IFD are not a single integrated device");
        public static EMVTagMeta FILE_CONTROL_INFORMATION_FCI_ISSUER_DISCRETIONARY_DATA_BF0C_KRN = new EMVTagMeta(DataKernelID.KRN, "BF0C", "File Control Information (FCI) Issuer Discretionary Data", DataTemplate._A5, new DataFormatterLengthRange(DataFormats._BINARY, 0, 222), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer discretionary part of the FCI");
        public static EMVTagMeta FILE_CONTROL_INFORMATION_FCI_PROPRIETARY_TEMPLATE_A5_KRN = new EMVTagMeta(DataKernelID.KRN, "A5", "File Control Information (FCI) Proprietary Template", DataTemplate._6F, new DataFormatterLengthRange(DataFormats._BINARY, 0, 240), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the data object proprietary to this specification in the FCI template according to ISO/IEC 7816-4");
        public static EMVTagMeta FILE_CONTROL_INFORMATION_FCI_TEMPLATE_6F_KRN = new EMVTagMeta(DataKernelID.KRN, "6F", "File Control Information (FCI) Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the FCI template according to ISO/IEC 7816-4");
        public static EMVTagMeta ICC_DYNAMIC_NUMBER_9F4C_KRN = new EMVTagMeta(DataKernelID.KRN, "9F4C", "ICC Dynamic Number", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 2, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Time-variant number generated by the ICC, to be captured by the terminal");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PIN_ENCIPHERMENT_PUBLIC_KEY_CERTIFICATE_9F2D_KRN = new EMVTagMeta(DataKernelID.KRN, "9F2D", "Integrated Circuit Card (ICC) PIN Encipherment Public Key Certificate", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "ICC PIN Encipherment Public Key certified by the issuer");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PIN_ENCIPHERMENT_PUBLIC_KEY_EXPONENT_9F2E_KRN = new EMVTagMeta(DataKernelID.KRN, "9F2E", "Integrated Circuit Card (ICC) PIN Encipherment Public Key Exponent", DataTemplate._70_OR_77, new DataFormatterLengthList(DataFormats._BINARY, 1, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "ICC PIN Encipherment Public Key Exponent used for PIN encipherment");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PIN_ENCIPHERMENT_PUBLIC_KEY_REMAINDER_9F2F_KRN = new EMVTagMeta(DataKernelID.KRN, "9F2F", "Integrated Circuit Card (ICC) PIN Encipherment Public Key Remainder", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Remaining digits of the ICC PIN Encipherment Public Key Modulus");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_CERTIFICATE_9F46_KRN = new EMVTagMeta(DataKernelID.KRN, "9F46", "Integrated Circuit Card (ICC) Public Key Certificate", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 248), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "ICC Public Key certified by the issuer");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_EXPONENT_9F47_KRN = new EMVTagMeta(DataKernelID.KRN, "9F47", "Integrated Circuit Card (ICC) Public Key Exponent", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 1, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "ICC Public Key Exponent used for the verification of the Signed Dynamic Application Data");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_REMAINDER_9F48_KRN = new EMVTagMeta(DataKernelID.KRN, "9F48", "Integrated Circuit Card (ICC) Public Key Remainder", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Remaining digits of the ICC Public Key Modulus");
        public static EMVTagMeta INTERFACE_DEVICE_IFD_SERIAL_NUMBER_9F1E_KRN = new EMVTagMeta(DataKernelID.KRN, "9F1E", "Interface Device (IFD) Serial Number", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Unique and permanent serial number assigned to the IFD by the manufacturer");
        public static EMVTagMeta INTERNATIONAL_BANK_ACCOUNT_NUMBER_IBAN_5F53_KRN = new EMVTagMeta(DataKernelID.KRN, "5F53", "International Bank Account Number (IBAN)", DataTemplate._BF0C_OR_73, new DataFormatterLengthRange(DataFormats._BINARY, 0, 34), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Uniquely identifies the account of a customer at a financial institution as defined in ISO 13616.");
        public static EMVTagMeta ISSUER_ACTION_CODE_DEFAULT_9F0D_KRN = new EMVTagMeta(DataKernelID.KRN, "9F0D", "Issuer Action Code - Default", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Specifies the issuer’s conditions that cause a transaction to be rejected if it might have been approved online, but the terminal is unable to process the transaction online");
        public static EMVTagMeta ISSUER_ACTION_CODE_DENIAL_9F0E_KRN = new EMVTagMeta(DataKernelID.KRN, "9F0E", "Issuer Action Code - Denial", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Specifies the issuer’s conditions that cause the denial of a transaction without attempt to go online");
        public static EMVTagMeta ISSUER_ACTION_CODE_ONLINE_9F0F_KRN = new EMVTagMeta(DataKernelID.KRN, "9F0F", "Issuer Action Code - Online", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Specifies the issuer’s conditions that cause a transaction to be transmitted online");
        public static EMVTagMeta ISSUER_APPLICATION_DATA_9F10_KRN = new EMVTagMeta(DataKernelID.KRN, "9F10", "Issuer Application Data", DataTemplate._77_OR_80, new DataFormatterLengthRange(DataFormats._BINARY, 0, 32), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains proprietary application data for transmission to the issuer in an online transaction.");
        public static EMVTagMeta ISSUER_AUTHENTICATION_DATA_91_KRN = new EMVTagMeta(DataKernelID.KRN, "91", "Issuer Authentication Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 8, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Data sent to the ICC for online issuer authentication");
        public static EMVTagMeta ISSUER_CODE_TABLE_INDEX_9F11_KRN = new EMVTagMeta(DataKernelID.KRN, "9F11", "Issuer Code Table Index", DataTemplate._A5, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the code table according to ISO/IEC 8859 for displaying the Application Preferred Name");
        public static EMVTagMeta ISSUER_COUNTRY_CODE_5F28_KRN = new EMVTagMeta(DataKernelID.KRN, "5F28", "Issuer Country Code", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the country of the issuer according to ISO 3166");
        public static EMVTagMeta ISSUER_COUNTRY_CODE_ALPHA2_FORMAT_5F55_KRN = new EMVTagMeta(DataKernelID.KRN, "5F55", "Issuer Country Code (alpha2 format)", DataTemplate._BF0C_OR_73, new DataFormatterLengthFixed(DataFormats._ALPHA, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the country of the issuer as defined in ISO 3166 (using a 2 character alphabetic code)");
        public static EMVTagMeta ISSUER_COUNTRY_CODE_ALPHA3_FORMAT_5F56_KRN = new EMVTagMeta(DataKernelID.KRN, "5F56", "Issuer Country Code (alpha3 format)", DataTemplate._BF0C_OR_73, new DataFormatterLengthFixed(DataFormats._ALPHA, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the country of the issuer as defined in ISO 3166 (using a 3 character alphabetic code)");
        public static EMVTagMeta ISSUER_IDENTIFICATION_NUMBER_IIN_42_KRN = new EMVTagMeta(DataKernelID.KRN, "42", "Issuer Identification Number (IIN)", DataTemplate._BF0C_OR_73, new DataFormatterLengthFixed(DataFormats._NUMERIC, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "The number that identifies the major industry and the card issuer and that forms the first part of the Primary Account Number (PAN)");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_CERTIFICATE_90_KRN = new EMVTagMeta(DataKernelID.KRN, "90", "Issuer Public Key Certificate", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 248), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer public key certified by a certification authority");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_EXPONENT_9F32_KRN = new EMVTagMeta(DataKernelID.KRN, "9F32", "Issuer Public Key Exponent", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 1, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer public key exponent used for the verification of the Signed Static Application Data and the ICC Public Key Certificate");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_REMAINDER_92_KRN = new EMVTagMeta(DataKernelID.KRN, "92", "Issuer Public  Key Remainder", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 284), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Remaining digits of the Issuer Public Key  Modulus");
        public static EMVTagMeta ISSUER_SCRIPT_COMMAND_86_KRN = new EMVTagMeta(DataKernelID.KRN, "86", "Issuer Script Command", DataTemplate._71_OR_72, new DataFormatterLengthRange(DataFormats._BINARY, 0, 261), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains a command for transmission to the ICC");
        public static EMVTagMeta ISSUER_SCRIPT_IDENTIFIER_9F18_KRN = new EMVTagMeta(DataKernelID.KRN, "9F18", "Issuer Script Identifier", DataTemplate._71_OR_72, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identification of the Issuer Script");
        public static EMVTagMeta ISSUER_SCRIPT_RESULTS_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Issuer Script Results", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the result of the terminal script processing");
        public static EMVTagMeta ISSUER_SCRIPT_TEMPLATE_1_71_KRN = new EMVTagMeta(DataKernelID.KRN, "71", "Issuer Script Template 1", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains proprietary issuer data for transmission to the ICC before the second GENERATE AC command");
        public static EMVTagMeta ISSUER_SCRIPT_TEMPLATE_2_72_KRN = new EMVTagMeta(DataKernelID.KRN, "72", "Issuer Script Template 2", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains proprietary issuer data for transmission to the ICC after the second GENERATE AC command");
        public static EMVTagMeta ISSUER_URL_5F50_KRN = new EMVTagMeta(DataKernelID.KRN, "5F50", "Issuer URL", DataTemplate._BF0C_OR_73, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "The URL provides the location of the Issuer’s Library Server on the Internet.");
        public static EMVTagMeta LANGUAGE_PREFERENCE_5F2D_KRN = new EMVTagMeta(DataKernelID.KRN, "5F2D", "Language Preference", DataTemplate._A5, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC, 2, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "1-4 languages stored in order of preference, each represented by 2 alphabetical characters according to ISO 639");
        public static EMVTagMeta LAST_ONLINE_APPLICATION_TRANSACTION_COUNTER_ATC_REGISTER_9F13_KRN = new EMVTagMeta(DataKernelID.KRN, "9F13", "Last Online Application Transaction Counter (ATC) Register", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "ATC value of the last transaction that went online");
        public static EMVTagMeta LOG_ENTRY_9F4D_KRN = new EMVTagMeta(DataKernelID.KRN, "9F4D", "Log Entry", DataTemplate._BF0C_OR_73, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Provides the SFI of the Transaction Log file and its number of records");
        public static EMVTagMeta LOG_FORMAT_9F4F_KRN = new EMVTagMeta(DataKernelID.KRN, "9F4F", "Log Format", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "List (in tag and length format) of data objects representing the logged data elements that are passed to the terminal when a transaction log record is read");
        public static EMVTagMeta LOWER_CONSECUTIVE_OFFLINE_LIMIT_9F14_KRN = new EMVTagMeta(DataKernelID.KRN, "9F14", "Lower Consecutive Offline Limit", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer-specified preference for the maximum number of consecutive offline transactions for this ICC application allowed in a terminal with online capability");
        public static EMVTagMeta MAXIMUM_TARGET_PERCENTAGE_TO_BE_USED_FOR_BIASED_RANDOM_SELECTION_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Maximum Target Percentage to be used for Biased Random Selection", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value used in terminal risk management for random transaction selection");
        public static EMVTagMeta MERCHANT_CATEGORY_CODE_9F15_KRN = new EMVTagMeta(DataKernelID.KRN, "9F15", "Merchant Category Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Classifies the type of business being done by the merchant, represented according to ISO 8583:1993 for Card Acceptor Business Code");
        public static EMVTagMeta MERCHANT_IDENTIFIER_9F16_KRN = new EMVTagMeta(DataKernelID.KRN, "9F16", "Merchant Identifier", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC_SPECIAL, 15), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "When concatenated with the Acquirer Identifier, uniquely identifies a given merchant");
        public static EMVTagMeta MERCHANT_NAME_AND_LOCATION_9F4E_KRN = new EMVTagMeta(DataKernelID.KRN, "9F4E", "Merchant Name and Location", DataTemplate.None, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the name and location of the merchant");
        public static EMVTagMeta MESSAGE_TYPE_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Message Type", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates whether the batch data capture record is a financial record or advice");
        public static EMVTagMeta PERSONAL_IDENTIFICATION_NUMBER_PIN_PAD_SECRET_KEY_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Personal Identification Number (PIN) Pad Secret Key", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Secret key of a symmetric algorithm used by the PIN pad to encipher the PIN and by the card reader to decipher the PIN if the PIN pad and card reader are not integrated");
        public static EMVTagMeta PERSONAL_IDENTIFICATION_NUMBER_PIN_TRY_COUNTER_9F17_KRN = new EMVTagMeta(DataKernelID.KRN, "9F17", "Personal Identification Number (PIN) Try Counter", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Number of PIN tries remaining");
        public static EMVTagMeta POINTOFSERVICE_POS_ENTRY_MODE_9F39_KRN = new EMVTagMeta(DataKernelID.KRN, "9F39", "Point-of-Service (POS) Entry Mode", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the method by which the PAN was entered, according to the first two digits of the ISO 8583:1987 POS Entry Mode");
        public static EMVTagMeta PROCESSING_OPTIONS_DATA_OBJECT_LIST_PDOL_9F38_KRN = new EMVTagMeta(DataKernelID.KRN, "9F38", "Processing Options Data Object List (PDOL)", DataTemplate._A5, new DataFormatterLengthRange(DataFormats._BINARY, 0, 240), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains a list of terminal resident data objects (tags and lengths) needed by the ICC in processing the GET PROCESSING OPTIONS command");
        public static EMVTagMeta PROPRIETARY_AUTHENTICATION_DATA_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Proprietary Authentication Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains issuer data for transmission to the card in the Issuer Authentication Data of an online transaction.");
        public static EMVTagMeta READ_RECORD_RESPONSE_MESSAGE_TEMPLATE_70_KRN = new EMVTagMeta(DataKernelID.KRN, "70", "READ RECORD Response Message Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains the contents of the record read. (Mandatory for SFIs 1-10. Response messages for SFIs 11-30 are outside the scope of EMV, but may use template 70)");
        public static EMVTagMeta RESPONSE_MESSAGE_TEMPLATE_FORMAT_1_80_KRN = new EMVTagMeta(DataKernelID.KRN, "80", "Response Message Template Format 1", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 253), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains the data objects (without tags and lengths) returned by the ICC in response to a command");
        public static EMVTagMeta RESPONSE_MESSAGE_TEMPLATE_FORMAT_2_77_KRN = new EMVTagMeta(DataKernelID.KRN, "77", "Response Message Template Format 2", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 253), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains the data objects (with tags and lengths) returned by the ICC in response to a command");
        public static EMVTagMeta SERVICE_CODE_5F30_KRN = new EMVTagMeta(DataKernelID.KRN, "5F30", "Service Code", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Service code as defined in ISO/IEC 7813 for track 1 and track 2");
        public static EMVTagMeta SHORT_FILE_IDENTIFIER_SFI_88_KRN = new EMVTagMeta(DataKernelID.KRN, "88", "Short File Identifier (SFI)", DataTemplate._A5, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Identifies the AEF referenced in commands related to a given ADF or DDF. It is a binary data object having a value in the range 1 to 30 and with the three high order bits set to zero.");
        public static EMVTagMeta SIGNED_DYNAMIC_APPLICATION_DATA_9F4B_KRN = new EMVTagMeta(DataKernelID.KRN, "9F4B", "Signed Dynamic Application Data", DataTemplate._77_OR_80, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Digital signature on critical application parameters for DDA or CDA");
        public static EMVTagMeta SIGNED_STATIC_APPLICATION_DATA_93_KRN = new EMVTagMeta(DataKernelID.KRN, "93", "Signed Static Application Data", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Digital signature on critical application parameters for SDA");
        public static EMVTagMeta STATIC_DATA_AUTHENTICATION_TAG_LIST_9F4A_KRN = new EMVTagMeta(DataKernelID.KRN, "9F4A", "Static Data Authentication Tag List", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "List of tags of primitive data objects defined in this specification whose value fields are to be included in the Signed Static or Dynamic Application Data");
        public static EMVTagMeta TARGET_PERCENTAGE_TO_BE_USED_FOR_RANDOM_SELECTION_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Target Percentage to be Used for Random Selection", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value used in terminal risk management for random transaction selection");
        public static EMVTagMeta TERMINAL_ACTION_CODE_DEFAULT_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Terminal Action Code - Default", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Specifies the acquirer’s conditions that cause a transaction to be rejected if it might have been approved online, but the terminal is unable to process the transaction online");
        public static EMVTagMeta TERMINAL_ACTION_CODE_DENIAL_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Terminal Action Code - Denial", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Specifies the acquirer’s conditions that cause the denial of a transaction without attempt to go online");
        public static EMVTagMeta TERMINAL_ACTION_CODE_ONLINE_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Terminal Action Code - Online", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Specifies the acquirer’s conditions that cause a transaction to be transmitted online");
        public static EMVTagMeta TERMINAL_CAPABILITIES_9F33_KRN = new EMVTagMeta(DataKernelID.KRN, "9F33", "Terminal Capabilities", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the card data input, CVM, and security capabilities of the terminal");
        public static EMVTagMeta TERMINAL_COUNTRY_CODE_9F1A_KRN = new EMVTagMeta(DataKernelID.KRN, "9F1A", "Terminal Country Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the country of the terminal, represented according to ISO 3166");
        public static EMVTagMeta TERMINAL_FLOOR_LIMIT_9F1B_KRN = new EMVTagMeta(DataKernelID.KRN, "9F1B", "Terminal Floor Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the floor limit in the terminal in conjunction with the AID");
        public static EMVTagMeta TERMINAL_IDENTIFICATION_9F1C_KRN = new EMVTagMeta(DataKernelID.KRN, "9F1C", "Terminal Identification", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Designates the unique location of a terminal at a merchant");
        public static EMVTagMeta TERMINAL_RISK_MANAGEMENT_DATA_9F1D_KRN = new EMVTagMeta(DataKernelID.KRN, "9F1D", "Terminal Risk Management Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 1, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Application-specific value used by the card for risk management purposes");
        public static EMVTagMeta TERMINAL_TYPE_9F35_KRN = new EMVTagMeta(DataKernelID.KRN, "9F35", "Terminal Type", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the environment of the terminal, its communications capability, and its operational control");
        public static EMVTagMeta TERMINAL_VERIFICATION_RESULTS_95_KRN = new EMVTagMeta(DataKernelID.KRN, "95", "Terminal Verification Results", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Status of the different functions as seen from the terminal");
        public static EMVTagMeta THRESHOLD_VALUE_FOR_BIASED_RANDOM_SELECTION_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Threshold Value for Biased Random Selection", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value used in terminal risk management for random transaction selection");
        public static EMVTagMeta TRACK_1_DISCRETIONARY_DATA_9F1F_KRN = new EMVTagMeta(DataKernelID.KRN, "9F1F", "Track 1 Discretionary Data", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 0, 54), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Discretionary part of track 1 according to ISO/IEC 7813");
        public static EMVTagMeta TRACK_2_DISCRETIONARY_DATA_9F20_KRN = new EMVTagMeta(DataKernelID.KRN, "9F20", "Track 2 Discretionary Data", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._CN, 0, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Discretionary part of track 2 according to ISO/IEC 7813");
        public static EMVTagMeta TRACK_2_EQUIVALENT_DATA_57_KRN = new EMVTagMeta(DataKernelID.KRN, "57", "Track 2 Equivalent Data", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 19), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contains the data elements of track 2 according to ISO/IEC 7813, excluding start sentinel, end sentinel, and Longitudinal Redundancy Check (LRC)");
        public static EMVTagMeta TRANSACTION_AMOUNT_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Transaction Amount", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Clearing amount of the transaction, including tips and other adjustments");
        public static EMVTagMeta TRANSACTION_CERTIFICATE_DATA_OBJECT_LIST_TDOL_97_KRN = new EMVTagMeta(DataKernelID.KRN, "97", "Transaction Certificate Data Object List (TDOL)", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 252), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "List of data objects (tag and length) to be used by the terminal in generating the TC Hash Value");
        public static EMVTagMeta TRANSACTION_CERTIFICATE_TC_HASH_VALUE_98_KRN = new EMVTagMeta(DataKernelID.KRN, "98", "Transaction Certificate (TC) Hash Value", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 20), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Result of a hash function specified in Book 2, Annex B3.1");
        public static EMVTagMeta TRANSACTION_CURRENCY_CODE_5F2A_KRN = new EMVTagMeta(DataKernelID.KRN, "5F2A", "Transaction Currency Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the currency code of the transaction according to ISO 4217");
        public static EMVTagMeta TRANSACTION_CURRENCY_EXPONENT_5F36_KRN = new EMVTagMeta(DataKernelID.KRN, "5F36", "Transaction Currency Exponent", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the implied position of the decimal point from the right of the transaction amount represented according to ISO 4217");
        public static EMVTagMeta TRANSACTION_DATE_9A_KRN = new EMVTagMeta(DataKernelID.KRN, "9A", "Transaction Date", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._DATE_YYMMDD, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Local date that the transaction was authorised");
        public static EMVTagMeta TRANSACTION_PERSONAL_IDENTIFICATION_NUMBER_PIN_DATA_99_KRN = new EMVTagMeta(DataKernelID.KRN, "99", "Transaction Personal Identification Number (PIN) Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Data entered by the cardholder for the purpose of the PIN verification");
        public static EMVTagMeta TRANSACTION_REFERENCE_CURRENCY_CODE_9F3C_KRN = new EMVTagMeta(DataKernelID.KRN, "9F3C", "Transaction Reference Currency Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Code defining the common currency used by the terminal in case the Transaction Currency Code is different from the Application Currency Code");
        public static EMVTagMeta TRANSACTION_REFERENCE_CURRENCY_CONVERSION_INTERNAL_KRN = new EMVTagMeta(DataKernelID.KRN, "INTERNAL", "Transaction Reference Currency Conversion", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Factor used in the conversion from the Transaction Currency Code to the Transaction Reference Currency Code");
        public static EMVTagMeta TRANSACTION_REFERENCE_CURRENCY_EXPONENT_9F3D_KRN = new EMVTagMeta(DataKernelID.KRN, "9F3D", "Transaction Reference Currency Exponent", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the implied position of the decimal point from the right of the transaction amount, with the Transaction Reference Currency Code represented according to ISO 4217");
        public static EMVTagMeta TRANSACTION_SEQUENCE_COUNTER_9F41_KRN = new EMVTagMeta(DataKernelID.KRN, "9F41", "Transaction Sequence Counter", DataTemplate.None, new DataFormatterLengthRange(DataFormats._NUMERIC, 2, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Counter maintained by the terminal that is incremented by one for each transaction");
        public static EMVTagMeta TRANSACTION_STATUS_INFORMATION_9B_KRN = new EMVTagMeta(DataKernelID.KRN, "9B", "Transaction Status Information", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the functions performed in a transaction");
        public static EMVTagMeta TRANSACTION_TIME_9F21_KRN = new EMVTagMeta(DataKernelID.KRN, "9F21", "Transaction Time", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._TIME_HHMMSS, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Local time that the transaction was authorised");
        public static EMVTagMeta TRANSACTION_TYPE_9C_KRN = new EMVTagMeta(DataKernelID.KRN, "9C", "Transaction Type", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Indicates the type of financial transaction, represented by the first two digits of the ISO 8583:1987 Processing Code. The actual values to be used for the Transaction Type data element are defined by the relevant payment system");
        public static EMVTagMeta UNPREDICTABLE_NUMBER_9F37_KRN = new EMVTagMeta(DataKernelID.KRN, "9F37", "Unpredictable Number", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Value to provide variability and uniqueness to the generation of a cryptogram");
        public static EMVTagMeta UPPER_CONSECUTIVE_OFFLINE_LIMIT_9F23_KRN = new EMVTagMeta(DataKernelID.KRN, "9F23", "Upper Consecutive Offline Limit", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Issuer-specified preference for the maximum number of consecutive offline transactions for this ICC application allowed in a terminal without online capability");
        public static EMVTagMeta TERMINAL_TRANSACTION_QUALIFIERS_TTQ_9F66_KRN = new EMVTagMeta(DataKernelID.KRN, "9F66", "Terminal Transaction Qualifiers (TTQ)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta PAYMENT_ACCOUNT_REFERENCE_9F24_KRN = new EMVTagMeta(DataKernelID.KRN, "9F24", "Payment Account Reference", DataTemplate._70_OR_77, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC, 29), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The Payment Account Reference is a data object associated with an Application PAN. It allows acquirers and merchants to link transactions, whether tokenised or not, that are associated to the same underlying Application PAN. Lower case alphabetic characters are not permitted for the Payment Account Reference, however the Kernel is not expected to check this.");
        #endregion
        #region KRN1
        public static EMVTagMeta VLP_ISSUER_AUTHORISATION_CODE_9F74_KRN1 = new EMVTagMeta(DataKernelID.K1, "9F74", "VLP Issuer Authorisation Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC_SPECIAL, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta VLP_TERMINAL_SUPPORT_INDICATOR_9F7A_KRN1 = new EMVTagMeta(DataKernelID.K1, "9F7A", "VLP Terminal Support Indicator", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        #endregion
        #region KRN2
        public static EMVTagMeta ACTIVE_AFL_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Active AFL", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 248), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains the AFL indicating the (remaining) terminal file records to be read from the Card. The Active AFL is updated after each successful READ RECORD.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta ACTIVE_TAG_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Active Tag", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains the tag requested by the GET DATA command.");
        public static EMVTagMeta AC_TYPE_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "AC Type", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains the AC type to be requested from the Card with the GENERATE AC command. This is the outcome of Terminal Action Analysis. AC Type Byte 1 b8-7 AC type 00: AAC 01: TC 10: ARQC 11: RFU b6-1 Each bit RFUEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta APPLICATION_CAPABILITIES_INFORMATION_9F5D_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F5D", "Application Capabilities Information", DataTemplate._BF0C, new DataFormatterLengthFixed(DataFormats._BINARY, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Lists a number of card features beyond regular payment. Application Capabilities Information Byte 1 b8-5 ACI Version number 0000: VERSION 0 Other values: RFU b4-1 Data Storage Version Number 0000: DATA STORAGE NOT SUPPORTED 0001: VERSION 1 0010: VERSION 2 Other values: RFUAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6  Application Capabilities Information Byte 2 b8-4 Each bit RFU b3 Support for field off detection b2 Support for balance reading b1 CDA Indicator 0: CDA SUPPORTED AS IN EMV 1: CDA SUPPORTED OVER TC, ARQC AND AAC Byte 3 b8-1 SDS Scheme Indicator 00000000: Undefined SDS configuration 00000001: All 10 tags 32 bytes 00000010: All 10 tags 48 bytes 00000011: All 10 tags 64 bytes 00000100: All 10 tags 96 bytes 00000101: All 10 tags 128 bytes 00000110: All 10 tags 160 bytes 00000111: All 10 tags 192 bytes 00001000: All SDS tags 32 bytes except '9F78' which is 64 bytes Other values: RFU");
        public static EMVTagMeta APPLICATION_FILE_LOCATOR_94_KRN2 = new EMVTagMeta(DataKernelID.K2, "94", "Application File Locator", DataTemplate._77, new DataFormatterLengthRangeMultiple(DataFormats._BINARY, 4, 248, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Indicates the location (SFI range of records) of the Application Elementary Files associated with a particular AID, and read by the Kernel during a transaction. The Application File Locator is a list of entries of 4 bytes each. Each entry codes an SFI and a range of records as follows:  The five most significant bits of the first byte indicate the SFI.  The second byte indicates the first (or only) record number to be read for that SFI.  The third byte indicates the last record number to be read for that SFI. When the third byte is greater than the second byte, all the records ranging from the record number in the second byte to and including the record number in the third byte must be read for that SFI. When the third byte is equal to the second byte, only the record number coded in the second byte must be read for that SFI.  The fourth byte indicates the number of records involved in offline data authentication starting with the record number coded in the second byte. The fourth byte may range from zero to the value of the third byte less the value of the second byte plus 1.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta APPLICATION_LABEL_50_KRN2 = new EMVTagMeta(DataKernelID.K2, "50", "Application Label", DataTemplate._A5, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 0, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Name associated with the AID, in accordance with [ISO/IEC 7816-5].Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta APPLICATION_PREFERRED_NAME_9F12_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F12", "Application Preferred Name", DataTemplate._A5, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 0, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Preferred name associated with the AID.");
        public static EMVTagMeta BALANCE_READ_BEFORE_GEN_AC_DF8104_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8104", "Balance Read Before Gen AC", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "The presence of Balance Read Before Gen AC in the TLV Database is an indication to the Kernel to read the offline balance from the Card before the GENERATE AC command. The Kernel stores the offline balance read from the Card in Balance Read Before Gen AC.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta BALANCE_READ_AFTER_GEN_AC_DF8105_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8105", "Balance Read After Gen AC", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "The presence of Balance Read After Gen AC in the TLV Database is an indication to the Kernel to read the offline balance from the Card after the GENERATE AC command. The Kernel stores the offline balance read from the Card in Balance Read After Gen AC.");
        public static EMVTagMeta CARD_DATA_INPUT_CAPABILITY_DF8117_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8117", "Card Data Input Capability", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the card data input capability of the Terminal and Reader. The Card Data Input Capability is coded according to Annex A.2 of [EMV Book 4]. Card Data Input Capability Byte 1 b8 Manual key entry b7 Magnetic stripe b6 IC with contacts b5-1 Each bit RFUAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta CDOL1_8C_KRN2 = new EMVTagMeta(DataKernelID.K2, "8C", "CDOL1", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "A data object in the Card that provides the Kernel with a list of data objects that must be passed to the Card in the data field of the GENERATE AC command.");
        public static EMVTagMeta CDOL1_RELATED_DATA_DF8107_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8107", "CDOL1 Related Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Command data field of the GENERATE AC command, coded according to CDOL1.");
        public static EMVTagMeta CVC3_TRACK1_9F60_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F60", "CVC3 (Track1)", DataTemplate._77, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The CVC3 (Track1) is a 2-byte cryptogram returned by the Card in the response to the COMPUTE CRYPTOGRAPHIC CHECKSUM command.");
        public static EMVTagMeta CVC3_TRACK2_9F61_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F61", "CVC3 (Track2)", DataTemplate._77, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The CVC3 (Track2) is a 2-byte cryptogram returned by the Card in the response to the COMPUTE CRYPTOGRAPHIC CHECKSUM command.");
        public static EMVTagMeta CVM_CAPABILITY_CVM_REQUIRED_DF8118_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8118", "CVM Capability – CVM Required", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the CVM capability of the Terminal and Reader when the transaction amount is greater than the Reader CVM Required Limit. The CVM Capability – CVM Required is coded according to Annex A.2 of [EMV Book 4].Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6  CVM Capability – CVM Required Byte 1 b8 Plaintext PIN for ICC verification b7 Enciphered PIN for online verification b6 Signature (paper) b5 Enciphered PIN for offline verification b4 No CVM required b3-1 Each bit RFU");
        public static EMVTagMeta CVM_CAPABILITY_NO_CVM_REQUIRED_DF8119_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8119", "CVM Capability – No CVM Required", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the CVM capability of the Terminal and Reader when the transaction amount is less than or equal to the Reader CVM Required Limit. The CVM Capability – No CVM Required is coded according to Annex A.2 of [EMV Book 4]. CVM Capability – No CVM Required Byte 1 b8 Plaintext PIN for ICC verification b7 Enciphered PIN for online verification b6 Signature (paper) b5 Enciphered PIN for offline verification b4 No CVM required b3-1 Each bit RFUEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta CVM_LIST_8E_KRN2 = new EMVTagMeta(DataKernelID.K2, "8E", "CVM List", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 10, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Identifies the methods of verification of the cardholder supported by the application. The CVM List is coded as specified in section 10.5 of [EMV Book 3].");
        public static EMVTagMeta DATA_NEEDED_DF8106_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8106", "Data Needed", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "List of tags included in the DEK Signal to request information from the Terminal.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta DATA_RECORD_FF8105_KRN2 = new EMVTagMeta(DataKernelID.K2, "FF8105", "Data Record", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Data Record is a list of TLV encoded data objects returned with the Outcome Parameter Set on the completion of transaction processing.");
        public static EMVTagMeta DATA_TO_SEND_FF8104_KRN2 = new EMVTagMeta(DataKernelID.K2, "FF8104", "Data To Send", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "List of data objects that contains the accumulated data sent by the Kernel to the Terminal in a DEK Signal. These data may correspond to Terminal reading requests, obtained from the Card by means of GET DATA or READ RECORD commands, or may correspond to data that the Kernel posts to the Terminal as part of its own processing.");
        public static EMVTagMeta DD_CARD_TRACK1_DF812A_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF812A", "DD Card (Track1)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 0, 56), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "If Track 1 Data is present, then DD Card (Track1) contains a copy of the discretionary data field of Track 1 Data as returned by the Card in the file read using the READ RECORD command during a mag-stripe mode transaction (i.e. without Unpredictable Number (Numeric), Application Transaction Counter, CVC3 (Track1) and nUN included).EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta DD_CARD_TRACK2_DF812B_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF812B", "DD Card (Track2)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._CN, 0, 11), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "DD Card (Track2) contains a copy of the discretionary data field of Track 2 Data as returned by the Card in the file read using the READ RECORD command during a mag-stripe mode transaction (i.e. without Unpredictable Number (Numeric), Application Transaction Counter, CVC3 (Track2) and nUN included).");
        public static EMVTagMeta DEFAULT_UDOL_DF811A_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF811A", "Default UDOL", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Default UDOL is the UDOL to be used for constructing the value field of the COMPUTE CRYPTOGRAPHIC CHECKSUM command if the UDOL in the Card is not present. The Default UDOL must contain as its only entry the tag and length of the Unpredictable Number (Numeric) and has the value: '9F6A04'.");
        public static EMVTagMeta DEVICE_ESTIMATED_TRANSMISSION_TIME_FOR_RELAY_RESISTANCE_RAPDU_DF8305_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8305", "Device Estimated Transmission Time For Relay Resistance R-APDU", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Indicates the time the Card expects to need for transmitting the EXCHANGE RELAY RESISTANCE DATA R-APDU. The Device Estimated Transmission Time For Relay Resistance RAPDU is expressed in units of hundreds of microseconds.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta DEVICE_RELAY_RESISTANCE_ENTROPY_DF8302_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8302", "Device Relay Resistance Entropy", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Random number returned by the Card in the response to the EXCHANGE RELAY RESISTANCE DATA command.");
        public static EMVTagMeta DISCRETIONARY_DATA_FF8106_KRN2 = new EMVTagMeta(DataKernelID.K2, "FF8106", "Discretionary Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Discretionary Data is a list of Kernel-specific data objects sent to the Terminal as a separate field in the OUT Signal.");
        public static EMVTagMeta DRDOL_9F51_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F51", "DRDOL", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "A data object in the Card that provides the Kernel with a list of data objects that must be passed to the Card in the data field of the RECOVER AC command.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta DRDOL_RELATED_DATA_DF8113_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8113", "DRDOL Related Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Command data field of the RECOVER AC command, coded according to DRDOL.");
        public static EMVTagMeta DS_AC_TYPE_DF8108_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8108", "DS AC Type", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains the AC type indicated by the Terminal for which IDS data must be stored in the Card. DS AC Type Byte 1 b8-7 AC type 00: AAC 01: TC 10: ARQC 11: RFU b6-1 Each bit RFUAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta DS_DIGEST_H_DF61_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF61", "DS Digest H", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains the result of OWHF2(DS Input (Term)) or OWHF2AES(DS Input (Term)), if DS Input (Term) is provided by the Terminal. This data object is to be supplied to the Card with the GENERATE AC command, as per DSDOL formatting.");
        public static EMVTagMeta DSDOL_9F5B_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F5B", "DSDOL", DataTemplate._70_OR_77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "A data object in the Card that provides the Kernel with a list of data objects that must be passed to the Card in the data field of the GENERATE AC command after the CDOL1 Related Data. An example of value for DSDOL is 'DF6008DF6108DF6201DF63A0', representing TLDS Input (Card) || TLDS Digest H || TLDS ODS Info || TLDS ODS Term. The Kernel must not presume that this is a given though, as the sequence and presence of data objects can vary. The presence of TL DS ODS Info is mandated and the processing of the last TL entry in DSDOL is different from normal TL processing as described in section 4.1.4.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta DS_ID_9F5E_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F5E", "DS ID", DataTemplate._BF0C, new DataFormatterLengthRange(DataFormats._NUMERIC, 8, 11), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Data Storage Identifier constructed as follows: Application PAN (without any 'F' padding) || Application PAN Sequence Number If necessary, it is padded to the left with one hexadecimal zero to ensure whole bytes. If necessary, it is padded to the left with hexadecimal zeroes to ensure a minimum length of 8 bytes.");
        public static EMVTagMeta DS_INPUT_CARD_DF60_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF60", "DS Input (Card)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains Terminal provided data if permanent data storage in the Card was applicable (DS Slot Management Control[8]=1b), remains applicable, or becomes applicable (DS ODS Info[8]=1b). Otherwise this data item is a filler to be supplied by the Kernel. The data is forwarded to the Card with the GENERATE AC command, as per DSDOL formatting.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta DS_INPUT_TERM_DF8109_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8109", "DS Input (Term)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains Terminal provided data if permanent data storage in the Card was applicable (DS Slot Management Control[8]=1b), remains applicable or becomes applicable (DS ODS Info[8]=1b). DS Input (Term) is used by the Kernel as input to calculate DS Digest H.");
        public static EMVTagMeta DS_ODS_CARD_9F54_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F54", "DS ODS Card", DataTemplate._77, new DataFormatterLengthRange(DataFormats._BINARY, 0, 160), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Contains the Card stored operator proprietary data obtained in the response to the GET PROCESSING OPTIONS command.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta DS_ODS_INFO_DF62_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF62", "DS ODS Info", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains Terminal provided data to be forwarded to the Card with the GENERATE AC command, as per DSDOL formatting. DS ODS Info Byte 1 b8 Permanent slot type b7 Volatile slot type b6 Low volatility b5 RFU b4 Decline payment transaction in case of data storage error b3-1 Each bit RFU");
        public static EMVTagMeta DS_ODS_INFO_FOR_READER_DF810A_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF810A", "DS ODS Info For Reader", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains instructions from the Terminal on how to proceed with the transaction if:  The AC requested by the Terminal does not match the AC proposed by the Kernel  The update of the slot data has failedAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6  DS ODS Info For Reader Byte 1 b8 Usable for TC b7 Usable for ARQC b6 Usable for AAC b5-4 Each bit RFU b3 Stop if no DS ODS Term b2 Stop if write failed b1 RFU");
        public static EMVTagMeta DS_ODS_TERM_DF63_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF63", "DS ODS Term", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 160), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains Terminal provided data to be forwarded to the Card with the GENERATE AC command, as per DSDOL formatting.");
        public static EMVTagMeta DS_REQUESTED_OPERATOR_ID_9F5C_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F5C", "DS Requested Operator ID", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains the Terminal determined operator identifier for data storage. It is sent to the Card in the GET PROCESSING OPTIONS command.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta DS_SLOT_AVAILABILITY_9F5F_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F5F", "DS Slot Availability", DataTemplate._77, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Contains the Card indication, obtained in the response to the GET PROCESSING OPTIONS command, about the slot type(s) available for data storage. DS Slot Availability Byte 1 b8 Permanent slot type b7 Volatile slot type b6-1 Each bit RFU");
        public static EMVTagMeta DS_SLOT_MANAGEMENT_CONTROL_9F6F_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F6F", "DS Slot Management Control", DataTemplate._77, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Contains the Card indication, obtained in the response to the GET PROCESSING OPTIONS command, about the status of the slot containing data associated to the DS Requested Operator ID. DS Slot Management Control Byte 1 b8 Permanent slot type b7 Volatile slot type b6 Low volatility b5 Locked slot b4-2 Each bit RFU b1 Deactivated slotAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta DS_SUMMARY_1_9F7D_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F7D", "DS Summary 1", DataTemplate._77, new DataFormatterLengthList(DataFormats._BINARY, 8, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Contains the Card indication, obtained in the response to the GET PROCESSING OPTIONS command, about either the stored summary associated with DS ODS Card if present, or about a default zero-filled summary if DS ODS Card is not present and DS Unpredictable Number is present.");
        public static EMVTagMeta DS_SUMMARY_2_DF8101_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8101", "DS Summary 2", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 8, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "This data allows the Kernel to check the consistency between DS Summary 1 and DS Summary 2, and so to ensure that DS ODS Card is provided by a genuine Card. It is located in the ICC Dynamic Data recovered from the Signed Dynamic Application Data.");
        public static EMVTagMeta DS_SUMMARY_3_DF8102_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8102", "DS Summary 3", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 8, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "This data allows the Kernel to check whether the Card has seen the same transaction data as were sent by the Terminal/Kernel. It is located in the ICC Dynamic Data recovered from the Signed Dynamic Application Data.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta DS_SUMMARY_STATUS_DF810B_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF810B", "DS Summary Status", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Information reported by the Kernel to the Terminal about:  The consistency between DS Summary 1 and DS Summary 2 (successful read)  The difference between DS Summary 2 and DS Summary 3 (successful write) This data object is part of the Discretionary Data. DS Summary Status Byte 1 b8 Successful Read b7 Successful Write b6-1 Each bit RFU");
        public static EMVTagMeta DS_UNPREDICTABLE_NUMBER_9F7F_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F7F", "DS Unpredictable Number", DataTemplate._77, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Contains the Card challenge (random), obtained in the response to the GET PROCESSING OPTIONS command, to be used by the Terminal in the summary calculation when providing DS ODS Term.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta DSVN_TERM_DF810D_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF810D", "DSVN Term", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Integrated data storage support by the Kernel depends on the presence of this data object. If it is absent, or is present with a length of zero, integrated data storage is not supported. Its value is '02' for this version of data storage functionality. This variable length data item has an initial byte that defines the maximum version number supported by the Terminal and a variable number of subsequent bytes that define how the Terminal supports earlier versions of the specification. As this is the first version, no legacy support is described and no additional bytes are present.");
        public static EMVTagMeta ERROR_INDICATION_DF8115_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8115", "Error Indication", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains information regarding the nature of the error that has been encountered during the transaction processing. This data object is part of the Discretionary Data. Data Field Length Format L1 1 b (see below) L2 1 b (see below) L3 1 b (see below) SW12 2 b Msg On Error 1 b (see Message Identifier as defined in");
        public static EMVTagMeta FAILED_MS_CNTR_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Failed MS Cntr", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Counts the number of failed consecutive mag-stripe mode transactions. The Failed MS Cntr is stored in the scratch pad provided to the Kernel at instantiation.");
        public static EMVTagMeta FILE_CONTROL_INFORMATION_ISSUER_DISCRETIONARY_DATA_BF0C_KRN2 = new EMVTagMeta(DataKernelID.K2, "BF0C", "File Control Information Issuer Discretionary Data", DataTemplate._A5, new DataFormatterLengthRange(DataFormats._BINARY, 0, 220), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Issuer discretionary part of the File Control Information Proprietary Template.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta FILE_CONTROL_INFORMATION_TEMPLATE_6F_KRN2 = new EMVTagMeta(DataKernelID.K2, "6F", "File Control Information Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Identifies the File Control Information Template, in accordance with [ISO 7816-4].");
        public static EMVTagMeta HOLD_TIME_VALUE_DF8130_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8130", "Hold Time Value", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the time that the field is to be turned off after the transaction is completed if requested to do so by the cardholder device. The Hold Time Value is in units of 100ms.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta ICC_PUBLIC_KEY_EXPONENT_9F47_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F47", "ICC Public Key Exponent", DataTemplate._70_OR_77, new DataFormatterLengthList(DataFormats._BINARY, 1, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Exponent used for the verification of the Signed Dynamic Application Data.");
        public static EMVTagMeta IDS_STATUS_DF8128_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8128", "IDS Status", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates if the transaction performs an IDS read and/or write. IDS Status Byte 1 b8 Read b7 Write b6-1 Each bit RFU");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_EXPONENT_9F32_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F32", "Issuer Public Key Exponent", DataTemplate._70_OR_77, new DataFormatterLengthList(DataFormats._BINARY, 1, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Exponent used for the recovery and verification of the ICC Public Key Certificate.");
        public static EMVTagMeta KERNEL_CONFIGURATION_DF811B_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF811B", "Kernel Configuration", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the Kernel configuration options. Kernel Configuration Byte 1 b8 Mag-stripe mode contactless transactions not supported b7 EMV mode contactless transactions not supported b6 On device cardholder verification supported b5 Relay resistance protocol supported b4-1 Each bit RFUEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta KERNEL_ID_DF810C_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF810C", "Kernel ID", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains a value that uniquely identifies each Kernel. There is one occurrence of this data object for each Kernel in the Reader.");
        public static EMVTagMeta MAGSTRIPE_APPLICATION_VERSION_NUMBER_READER_9F6D_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F6D", "Mag-stripe Application Version Number (Reader)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Version number assigned by the payment system for the specific mag-stripe mode functionality of the Kernel.");
        public static EMVTagMeta MAGSTRIPE_CVM_CAPABILITY_CVM_REQUIRED_DF811E_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF811E", "Mag-stripe CVM Capability – CVM Required", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the CVM capability of the Terminal/Reader in the case of a mag-stripe mode transaction when the Amount, Authorized (Numeric) is greater than the Reader CVM Required Limit. Mag-stripe CVM Capability – CVM Required Byte 1 b8-5 CVM 0000: NO CVM 0001: OBTAIN SIGNATURE 0010: ONLINE PIN 1111: N/A Other values: RFU b4-1 Each bit RFUEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta MAGSTRIPE_CVM_CAPABILITY_NO_CVM_REQUIRED_DF812C_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF812C", "Mag-stripe CVM Capability – No CVM Required", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the CVM capability of the Terminal/Reader in the case of a mag-stripe mode transaction when the Amount, Authorized (Numeric) is less than or equal to the Reader CVM Required Limit. Mag-stripe CVM Capability – No CVM Required Byte 1 b8-5 CVM 0000: NO CVM 0001: OBTAIN SIGNATURE 0010: ONLINE PIN 1111: N/A Other values: RFU b4-1 Each bit RFU");
        public static EMVTagMeta MAXIMUM_RELAY_RESISTANCE_GRACE_PERIOD_DF8133_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8133", "Maximum Relay Resistance Grace Period", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Minimum Relay Resistance Grace Period and Maximum Rela Resistance Grace Period represent how far outside the window defined by the Card that the measured time may be and yet still be considered acceptable. The Maximum Relay Resistance Grace Period is expressed in units of hundreds of microseconds.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta MAX_TIME_FOR_PROCESSING_RELAY_RESISTANCE_APDU_DF8304_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8304", "Max Time For Processing Relay Resistance APDU", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Indicates the maximum estimated time the Card requires for processing the EXCHANGE RELAY RESISTANCE DATA command. The Max Time For Processing Relay Resistance APDU is expressed in units of hundreds of microseconds.");
        public static EMVTagMeta MAX_LIFETIME_OF_TORN_TRANSACTION_LOG_RECORD_DF811C_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF811C", "Max Lifetime of Torn Transaction Log Record", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Maximum time, in seconds, that a record can remain in the Torn Transaction Log.");
        public static EMVTagMeta MAX_NUMBER_OF_TORN_TRANSACTION_LOG_RECORDS_DF811D_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF811D", "Max Number of Torn Transaction Log Records", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the maximum number of records that can be stored in the Torn Transaction Log.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta MEASURED_RELAY_RESISTANCE_PROCESSING_TIME_DF8306_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8306", "Measured Relay Resistance Processing Time", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains the time measured by the Kernel for processing the EXCHANGE RELAY RESISTANCE DATA command. The Measured Relay Resistance Processing Time is expressed in units of hundreds of microseconds.");
        public static EMVTagMeta MERCHANT_CUSTOM_DATA_9F7C_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F7C", "Merchant Custom Data", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 20), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Proprietary merchant data that may be requested by the Card.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta MESSAGE_HOLD_TIME_DF812D_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF812D", "Message Hold Time", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the default delay for the processing of the next MSG Signal. The Message Hold Time is an integer in units of 100ms.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta MINIMUM_RELAY_RESISTANCE_GRACE_PERIOD_DF8132_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8132", "Minimum Relay Resistance Grace Period", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Minimum Relay Resistance Grace Period and Maximum Relay Resistance Grace Period represent how far outside the window defined by the Card that the measured time may be and yet still be considered acceptable. The Minimum Relay Resistance Grace Period is expressed in units of hundreds of microseconds.");
        public static EMVTagMeta MIN_TIME_FOR_PROCESSING_RELAY_RESISTANCE_APDU_DF8303_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8303", "Min Time For Processing Relay Resistance APDU", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Indicates the mimimum estimated time the Card requires for processing the EXCHANGE RELAY RESISTANCE DATA command. The Min Time For Processing Relay Resistance APDU is expressed in units of hundreds of microseconds.");
        public static EMVTagMeta MOBILE_SUPPORT_INDICATOR_9F7E_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F7E", "Mobile Support Indicator", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Mobile Support Indicator informs the Card that the Kernel supports extensions for mobile and requires on device cardholder verification.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6  Mobile Support Indicator Byte 1 b8-3 Each bit RFU b2 OD-CVM Required b1 Mobile supported");
        public static EMVTagMeta NATC_TRACK1_9F64_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F64", "NATC(Track1)", DataTemplate._70, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The value of NATC(Track1) represents the number of digits of the Application Transaction Counter to be included in the discretionary data field of Track 1 Data.");
        public static EMVTagMeta NATC_TRACK2_9F67_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F67", "NATC(Track2)", DataTemplate._70, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The value of NATC(Track2) represents the number of digits of the Application Transaction Counter to be included in the discretionary data field of Track 2 Data.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta NEXT_CMD_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Next Cmd", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "An internal working variable used to indicate the C-APDU that is currently being processed by the Card. Next Cmd Byte 1 b8-7 Next Cmd 00: READ RECORD 01: GET DATA 10: NONE 11: RFU b6-1 Each bit RFU");
        public static EMVTagMeta NUN_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "nUN", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Number of non-zero bits in PUNATC(Track2) – NATC(Track2)Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta ODA_STATUS_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "ODA Status", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates if CDA is to be performed for the transaction in progress. ODA Status Byte 1 b8 CDA b7-1 Each bit RFU");
        public static EMVTagMeta OFFLINE_ACCUMULATOR_BALANCE_9F50_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F50", "Offline Accumulator Balance", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Represents the amount of offline spending available in the Card. The Offline Accumulator Balance is retrievable by the GET DATA command, if allowed by the Card configuration.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta OUTCOME_PARAMETER_SET_DF8129_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8129", "Outcome Parameter Set", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "This data object is used to indicate to the Terminal the outcome of the transaction processing by the Kernel. Its value is an accumulation of results about applicable parts of the transaction. Outcome Parameter Set Byte 1 b8-5 Status 0001: APPROVED 0010: DECLINED 0011: ONLINE REQUEST 0100: END APPLICATION 0101: SELECT NEXT 0110: TRY ANOTHER INTERFACE 0111: TRY AGAIN 1111: N/A Other values: RFU b4-1 Each bit RFU Byte 2 b8-5 Start 0000: A 0001: B 0010: C 0011: D 1111: N/A Other values: RFU b4-1 Each bit RFUAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6  Outcome Parameter Set Byte 3 b8-5 Online Response Data 1111: N/A Other values: RFU b4-1 Each bit RFU Byte 4 b8-5 CVM 0000: NO CVM 0001: OBTAIN SIGNATURE 0010: ONLINE PIN 0011: CONFIRMATION CODE VERIFIED 1111: N/A Other values: RFU b4-1 Each bit RFU Byte 5 b8 UI Request on Outcome Present b7 UI Request on Restart Present b6 Data Record Present b5 Discretionary Data Present b4 Receipt 0: N/A 1: YES b3-1 Each bit RFU Byte 6 b8-5 Alternate Interface Preference 1111: N/A Other values: RFU b4-1 Each bit RFU Byte 7 b8-1 Field Off Request 11111111: N/A Other values: Hold time in units of 100 ms Byte 8 b8-1 Removal TimeoutEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta PCVC3_TRACK1_9F62_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F62", "PCVC3(Track1)", DataTemplate._70, new DataFormatterLengthFixed(DataFormats._BINARY, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "PCVC3(Track1) indicates to the Kernel the positions in the discretionary data field of the Track 1 Data where the CVC3 (Track1) digits must be copied.");
        public static EMVTagMeta PCVC3_TRACK2_9F65_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F65", "PCVC3(Track2)", DataTemplate._70, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "PCVC3(Track2) indicates to the Kernel the positions in the discretionary data field of the Track 2 Data where the CVC3 (Track2) digits must be copied.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta PDOL_RELATED_DATA_DF8111_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8111", "PDOL Related Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Command data field of the GET PROCESSING OPTIONS command, coded according to PDOL.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta PHONE_MESSAGE_TABLE_DF8131_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8131", "Phone Message Table", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "The Phone Message Table is a variable length list of entries of eight bytes each, and defines for the selected AID the message and status identifiers as a function of the POS Cardholder Interaction Information. Each entry in the Phone Message Table contains the fields shown in the table below. Data Field Length Format PCII Mask 3 b PCII Value 3 b Message Identifier 1 b Status 1 b Note that the last entry in the Phone Message Table must always have PCII Mask and PCII Value set to '000000'.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta POS_CARDHOLDER_INTERACTION_INFORMATION_DF4B_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF4B", "POS Cardholder Interaction Information", DataTemplate._77, new DataFormatterLengthFixed(DataFormats._BINARY, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The POS Cardholder Interaction Information informs the Kernel about the indicators set in the mobile phone that may influence the action flow of the merchant and cardholder. POS Cardholder Interaction Information Byte 1 b8-1 Version Number Byte 2 b8-6 Each bit RFU b5 OD-CVM verification successful b4 Context is conflicting b3 Offline change PIN required b2 ACK required b1 OD-CVM required Byte 3 b8-1 Each bit RFUEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta POSTGEN_AC_PUT_DATA_STATUS_DF810E_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF810E", "Post-Gen AC Put Data Status", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Information reported by the Kernel to the Terminal, about the processing of PUT DATA commands after processing the GENERATE AC command. Possible values are 'completed' or 'not completed'. In the latter case, this status is not specific about which of the PUT DATA commands failed, or about how many of these commands have failed or succeeded. This data object is part of the Discretionary Data provided by the Kernel to the Terminal. Post-Gen AC Put Data Status Byte 1 b8 Completed b7-1 Each bit RFUAnnex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta PREGEN_AC_PUT_DATA_STATUS_DF810F_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF810F", "Pre-Gen AC Put Data Status", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Information reported by the Kernel to the Terminal, about the processing of PUT DATA commands before sending the GENERATE AC command. Possible values are 'completed' or 'not completed'. In the latter case, this status is not specific about which of the PUT DATA commands failed, or about how many of these commands have failed or succeeded. This data object is part of the Discretionary Data provided by the Kernel to the Terminal. Pre-Gen AC Put Data Status Byte 1 b8 Completed b7-1 Each bit RFUEMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta PROCEED_TO_FIRST_WRITE_FLAG_DF8110_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8110", "Proceed To First Write Flag", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Indicates that the Terminal will send no more requests to read data other than as indicated in Tags To Read. This data item indicates the point at which the Kernel shifts from the Card reading phase to the Card writing phase. If Proceed To First Write Flag is not present or is present with non zero length and value different from zero, then the Kernel proceeds without waiting. If Proceed To First Write Flag is present with zero length, then the Kernel sends a DEK Signal to the Terminal and waits for the DET Signal. If Proceed To First Write Flag is present with non zero length and value equal to zero, then the Kernel waits for a DET Signal from the Terminal without sending a DEK Signal.");
        public static EMVTagMeta PROTECTED_DATA_ENVELOPE_1_9F70_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F70", "Protected Data Envelope 1", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "The Protected Data Envelopes contain proprietary information from the issuer, payment system or third party. The Protected Data Envelope can be retrieved with the GET DATA command. Updating the Protected Data Envelope with the PUT DATA command requires secure messaging and is outside the scope of this specification.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta PROTECTED_DATA_ENVELOPE_2_9F71_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F71", "Protected Data Envelope 2", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Protected Data Envelope 1.");
        public static EMVTagMeta PROTECTED_DATA_ENVELOPE_3_9F72_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F72", "Protected Data Envelope 3", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Protected Data Envelope 1.");
        public static EMVTagMeta PROTECTED_DATA_ENVELOPE_4_9F73_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F73", "Protected Data Envelope 4", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Protected Data Envelope 1.");
        public static EMVTagMeta PROTECTED_DATA_ENVELOPE_5_9F74_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F74", "Protected Data Envelope 5", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Protected Data Envelope 1.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta PUNATC_TRACK1_9F63_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F63", "PUNATC(Track1)", DataTemplate._70, new DataFormatterLengthFixed(DataFormats._BINARY, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "PUNATC(Track1) indicates to the Kernel the positions in the discretionary data field of Track 1 Data where the Unpredictable Number (Numeric) digits and Application Transaction Counter digits have to be copied.");
        public static EMVTagMeta PUNATC_TRACK2_9F66_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F66", "PUNATC(Track2)", DataTemplate._70, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "PUNATC(Track2) indicates to the Kernel the positions in the discretionary data field of Track 2 Data where the Unpredictable Number (Numeric) digits and Application Transaction Counter digits have to be copied.");
        public static EMVTagMeta READER_CONTACTLESS_FLOOR_LIMIT_DF8123_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8123", "Reader Contactless Floor Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the transaction amount above which transactions must be authorized online.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta READER_CONTACTLESS_TRANSACTION_LIMIT_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Reader Contactless Transaction Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the transaction amount above which the transaction is not allowed. This data object is instantiated with Reader Contactless Transaction Limit (On-device CVM) if on device cardholder verification is supported by the Card and with Reader Contactless Transaction Limit (No On-device CVM) otherwise.");
        public static EMVTagMeta READER_CONTACTLESS_TRANSACTION_LIMIT_NO_ONDEVICE_CVM_DF8124_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8124", "Reader Contactless Transaction Limit (No Ondevice CVM)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the transaction amount above which the transaction is not allowed, when on device cardholder verification is not supported.");
        public static EMVTagMeta READER_CONTACTLESS_TRANSACTION_LIMIT_ONDEVICE_CVM_DF8125_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8125", "Reader Contactless Transaction Limit (On-device CVM)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the transaction amount above which the transaction is not allowed, when on device cardholder verification is supported.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta READER_CVM_REQUIRED_LIMIT_DF8126_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8126", "Reader CVM Required Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the transaction amount above which the Kernel instantiates the CVM capabilities field in Terminal Capabilities with CVM Capability – CVM Required.");
        public static EMVTagMeta READ_RECORD_RESPONSE_MESSAGE_TEMPLATE_70_KRN2 = new EMVTagMeta(DataKernelID.K2, "70", "READ RECORD Response Message Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 253), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Template containing the data objects returned by the Card in response to a READ RECORD command.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta REFERENCE_CONTROL_PARAMETER_DF8114_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8114", "Reference Control Parameter", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Working variable to store the reference control parameter of the GENERATE AC command. Reference Control Parameter Byte 1 b8-7 AC type 00: AAC 01: TC 10: ARQC 11: RFU b6 RFU b5 CDA signature requested b4-1 Each bit RFU");
        public static EMVTagMeta RELAY_RESISTANCE_ACCURACY_THRESHOLD_DF8136_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8136", "Relay Resistance Accuracy Threshold", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Represents the threshold above which the Kernel considers the variation between Measured Relay Resistance Processing Time and Min Time For Processing Relay Resistance APDU no longer acceptable. The Relay Resistance Accuracy Threshold is expressed in units of hundreds of microseconds.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta RELAY_RESISTANCE_TRANSMISSION_TIME_MISMATCH_THRESHOLD_DF8137_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8137", "Relay Resistance Transmission Time Mismatch Threshold", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Represents the threshold above which the Kernel considers the variation between Device Estimated Transmission Time For Relay Resistance R-APDU and Terminal Expected Transmission Time For Relay Resistance R-APDU no longer acceptable. The Relay Resistance Transmission Time Mismatch Threshold is a percentage and expressed as an integer.");
        public static EMVTagMeta RRP_COUNTER_DF8307_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8307", "RRP Counter", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Represents the number of retry attempts to send the EXCHANGE RELAY RESISTANCE DATA command to the Card within one transaction.");
        public static EMVTagMeta SECURITY_CAPABILITY_DF811F_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF811F", "Security Capability", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Indicates the security capability of the Kernel. The Security Capability is coded according to Annex A.2 of [EMV Book 4]. Security Capability Byte 1 b8 SDA b7 DDA b6 Card capture b5 RFU b4 CDA b3-1 Each bit RFU");
        public static EMVTagMeta STATIC_DATA_TO_BE_AUTHENTICATED_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Static Data To Be Authenticated", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 2048), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Buffer used to concatenate records that are involved in offline data authentication.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta TAGS_TO_READ_DF8112_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8112", "Tags To Read", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "List of tags indicating the data the Terminal has requested to be read. This data item is present if the Terminal wants any data back from the Card before the Data Record. This could be in the context of SDS, or for non data storage usage reasons, for example the PAN. This data item may contain configured data. This data object may be provided several times by the Terminal. Therefore, the values of each of these tags must be accumulated in the Tags To Read Yet buffer.");
        public static EMVTagMeta TAGS_TO_READ_YET_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Tags To Read Yet", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "List of tags that contains the accumulated Terminal data reading requests received in Tags To Read. Requested data objects that are sent to the Terminal are spooled from this buffer. Tags To Read Yet is initiated when the Kernel is started with Tags To Read if present in the ACT Signal. This list can be augmented with Terminal requested data items provided during Kernel processing in DET Signals. The Kernel sends the requested data objects to the Terminal with the DEK Signal in Data To Send.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta TAGS_TO_WRITE_AFTER_GEN_AC_FF8103_KRN2 = new EMVTagMeta(DataKernelID.K2, "FF8103", "Tags To Write After Gen AC", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Contains the Terminal data writing requests to be sent to the Card after processing the GENERATE AC command or the RECOVER AC command. The value of this data object is composed of a series of TLVs. This data object may be provided several times by the Terminal in a DET Signal. Therefore, these values must be accumulated in Tags To Write Yet After Gen AC.");
        public static EMVTagMeta TAGS_TO_WRITE_BEFORE_GEN_AC_FF8102_KRN2 = new EMVTagMeta(DataKernelID.K2, "FF8102", "Tags To Write Before Gen AC", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "List of data objects indicating the Terminal data writing requests to be sent to the Card before processing the GENERATE AC command or the RECOVER AC command. This data object may be provided several times by the Terminal in a DET Signal. Therefore, these values must be accumulated in Tags To Write Yet Before Gen AC buffer.");
        public static EMVTagMeta TAGS_TO_WRITE_YET_AFTER_GEN_AC_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Tags To Write Yet After Gen AC", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "List of data objects that contains the accumulated Terminal data writing requests received in Tags To Write After Gen AC.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta TAGS_TO_WRITE_YET_BEFORE_GEN_AC_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Tags To Write Yet Before Gen AC", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "List of data objects that contains the accumulated Terminal data writing requests received in Tags To Write Before Gen AC.");
        public static EMVTagMeta TERMINAL_ACTION_CODE_DEFAULT_DF8120_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8120", "Terminal Action Code – Default", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Specifies the acquirers conditions that cause a transaction to be rejected on an offline only Terminal.");
        public static EMVTagMeta TERMINAL_ACTION_CODE_DENIAL_DF8121_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8121", "Terminal Action Code – Denial", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Specifies the acquirers conditions that cause the denial of a transaction without attempting to go online.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta TERMINAL_ACTION_CODE_ONLINE_DF8122_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8122", "Terminal Action Code – Online", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 5), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Specifies the acquirers conditions that cause a transaction to be transmitted online on an online capable Terminal.");
        public static EMVTagMeta TERMINAL_EXPECTED_TRANSMISSION_TIME_FOR_RELAY_RESISTANCE_CAPDU_DF8134_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8134", "Terminal Expected Transmission Time For Relay Resistance C-APDU", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Represents the time that the Kernel expects to need for transmitting the EXCHANGE RELAY RESISTANCE DATA command to the Card. The Terminal Expected Transmission Time For Relay Resistance C-APDU is expressed in units of hundreds of microseconds.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta TERMINAL_EXPECTED_TRANSMISSION_TIME_FOR_RELAY_RESISTANCE_RAPDU_DF8135_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8135", "Terminal Expected Transmission Time For Relay Resistance R-APDU", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Represents the time that the Kernel expects that the Card will need for transmitting the EXCHANGE RELAY RESISTANCE DATA R-APDU. The Terminal Expected Transmission Time For Relay Resistance R-APDU is expressed in units of hundreds of microseconds.");
        public static EMVTagMeta TERMINAL_RELAY_RESISTANCE_ENTROPY_DF8301_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8301", "Terminal Relay Resistance Entropy", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Contains a Kernel challenge (random) to be used in the value field of the EXCHANGE RELAY RESISTANCE DATA command.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta TERMINAL_RISK_MANAGEMENT_DATA_9F1D_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F1D", "Terminal Risk Management Data", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 8), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Application-specific value used by the cardholder device for risk management purposes.");
        public static EMVTagMeta THIRD_PARTY_DATA_9F6E_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F6E", "Third Party Data", DataTemplate._BF0C_OR_70, new DataFormatterLengthRange(DataFormats._BINARY, 5, 32), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The Third Party Data contains various information, possibly including information from a third party. If present in the Card, the Third Party Data must be returned in a file read using the READ RECORD command or in the File Control Information Template. 'Device Type' is present when the most significant bit of byte 1 of 'Unique Identifier' is set to 0b. In this case, the maximum length of 'Proprietary Data' is 26 bytes. Otherwise it is 28 bytes. Data Field Length Format Country Code 2 Country Code according to [ISO 3166-1] Unique Identifier 2 b (value assigned by MasterCard) Device Type 0 or 2 an Proprietary Data 1-26 or 28 b");
        public static EMVTagMeta TIME_OUT_VALUE_DF8127_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8127", "Time Out Value", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Defines the time in ms before the timer generates a TIMEOUT Signal.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta TORN_ENTRY_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Torn Entry", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Data object that is used to refer to a record in the Torn Transaction Log. This may be the record number, but the actual implementation is proprietary.");
        public static EMVTagMeta TORN_RECORD_FF8101_KRN2 = new EMVTagMeta(DataKernelID.K2, "FF8101", "Torn Record", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "A copy of a record from the Torn Transaction Log that is expired. Torn Record is sent to the Terminal as part of the Discretionary Data.");
        public static EMVTagMeta TORN_TEMP_RECORD_INTERNAL_KRN2 = new EMVTagMeta(DataKernelID.K2, "INTERNAL", "Torn Temp Record", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Holds a copy of a record from the Torn Transaction Log.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta TRACK_1_DATA_56_KRN2 = new EMVTagMeta(DataKernelID.K2, "56", "Track 1 Data", DataTemplate._70, new DataFormatterLengthRange(DataFormats._ALPHA_NUMERIC_SPECIAL, 0, 76), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Track 1 Data contains the data objects of the track 1 according to [ISO/IEC 7813] Structure B, excluding start sentinel, end sentinel and LRC. The Track 1 Data may be present in the file read using the READ RECORD command during a mag-stripe mode transaction. It is made up of the following sub-fields: Data Field Length Format Format Code 1 '42' Primary Account Number var up to 19 digits Field Separator 1 '5E' Name 2-26 (see ISO/IEC 7813) Field Separator 1 '5E' Expiry Date 4 YYMM Service Code 3 digits Discretionary Data var. ans");
        public static EMVTagMeta TRACK_2_DATA_9F6B_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F6B", "Track 2 Data", DataTemplate._70, new DataFormatterLengthRange(DataFormats._BINARY, 0, 19), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "Track 2 Data contains the data objects of the track 2 according to [ISO/IEC 7813], excluding start sentinel, end sentinel and LRC. The Track 2 Data has a maximum length of 37 positions and is present in the file read using the READ RECORD command during a mag-stripe mode transaction. It is made up of the following sub-fields: Data Field Length Format Primary Account Number var. up to 19 nibbles n Field Separator 1 nibble b ('D') Expiry Date 2 n (YYMM) Service Code 3 nibbles n Discretionary Data var. n Padded with 'F' if needed to ensure whole bytes. 1 nibble b");
        public static EMVTagMeta TRANSACTION_CATEGORY_CODE_9F53_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F53", "Transaction Category Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "This is a data object defined by MasterCard which indicates the type of transaction being performed, and which may be used in card risk management.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta UDOL_9F69_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F69", "UDOL", DataTemplate._70, new DataFormatterLengthRange(DataFormats._BINARY, 0, 250), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA }, "The UDOL is the DOL that specifies the data objects to be included in the data field of the COMPUTE CRYPTOGRAPHIC CHECKSUM command. The UDOL must at least include the Unpredictable Number (Numeric). The UDOL is not mandatory for the Card. If it is not present in the Card, then the Default UDOL is used.");
        public static EMVTagMeta UNPREDICTABLE_NUMBER_NUMERIC_9F6A_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F6A", "Unpredictable Number (Numeric)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Unpredictable number generated by the Kernel during a mag-stripe mode transaction. The Unpredictable Number (Numeric) is passed to the Card in the data field of the COMPUTE CRYPTOGRAPHIC CHECKSUM command. The 8-nUN most significant digits must be set to zero.");
        public static EMVTagMeta UNPROTECTED_DATA_ENVELOPE_1_9F75_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F75", "Unprotected Data Envelope 1", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "The Unprotected Data Envelopes contain proprietary information from the issuer, payment system or third party. Unprotected Data Envelopes can be retrieved with the GET DATA command and can be updated with the PUT DATA (CLA='80') command without secure messaging.");
        public static EMVTagMeta UNPROTECTED_DATA_ENVELOPE_2_9F76_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F76", "Unprotected Data Envelope 2", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Unprotected Data Envelope 1.EMV Contactless Book C-2 Annex A Data Dictionary Kernel 2 Spec v2.6 A.1 Data Objects by Name");
        public static EMVTagMeta UNPROTECTED_DATA_ENVELOPE_3_9F77_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F77", "Unprotected Data Envelope 3", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Unprotected Data Envelope 1.");
        public static EMVTagMeta UNPROTECTED_DATA_ENVELOPE_4_9F78_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F78", "Unprotected Data Envelope 4", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Unprotected Data Envelope 1.");
        public static EMVTagMeta UNPROTECTED_DATA_ENVELOPE_5_9F79_KRN2 = new EMVTagMeta(DataKernelID.K2, "9F79", "Unprotected Data Envelope 5", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 192), new UpdatePermissionEnum[] { UpdatePermissionEnum.K, UpdatePermissionEnum.RA, UpdatePermissionEnum.ACT, UpdatePermissionEnum.DET }, "Same as Unprotected Data Envelope 1.Annex A Data Dictionary EMV Contactless Book C-2 A.1 Data Objects by Name Kernel 2 Spec v2.6");
        public static EMVTagMeta USER_INTERFACE_REQUEST_DATA_DF8116_KRN2 = new EMVTagMeta(DataKernelID.K2, "DF8116", "User Interface Request Data", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 22), new UpdatePermissionEnum[] { UpdatePermissionEnum.K }, "Combines all parameters to be sent with the MSG Signal. Data Field Length Format Message Identifier 1 b (see below) Status 1 b (see below) Hold Time 3 n 6 Language Preference 8 an (padded with hexadecimal zeroes if length of tag '5F2D' is less than 8 bytes) Value Qualifier 1 b (see below) Value 6 n 12 Currency Code 2 n 3");
        #endregion
        #region KRN3
        public static EMVTagMeta APPLICATION_PROGRAM_IDENTIFIER_PROGRAM_ID_9F5A_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F5A", "Application Program Identifier (Program ID)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 1, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta APPLICATION_SELECTION_REGISTERED_PROPRIETARY_DATA_ASRPD_9F0A_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F0A", "Application Selection Registered Proprietary Data (ASRPD)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta AUTHORISATION_CODE_89_KRN3 = new EMVTagMeta(DataKernelID.K3, "89", "Authorisation Code", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._ALPHA_NUMERIC_SPACE, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta AVAILABLE_OFFLINE_SPENDING_AMOUNT_AOSA_9F5D_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F5D", "Available Offline Spending Amount (AOSA)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CARD_AUTHENTICATION_RELATED_DATA_9F69_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F69", "Card Authentication Related Data", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 5, 16), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CARD_TRANSACTION_QUALIFIERS_CTQ_9F6C_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F6C", "Card Transaction Qualifiers (CTQ)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 2), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CERTIFICATE_AUTHORITY_PUBLIC_KEY_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Certificate Authority Public Key", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CERTIFICATE_AUTHORITY_PUBLIC_KEY_CHECK_SUM_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Certificate Authority Public Key Check Sum", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 20), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CERTIFICATE_AUTHORITY_PUBLIC_KEY_EXPONENT_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Certificate Authority Public Key Exponent", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 1, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CERTIFICATE_AUTHORITY_PUBLIC_KEY_MODULUS_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Certificate Authority Public Key Modulus", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta CUSTOMER_EXCLUSIVE_DATA_CED_9F7C_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F7C", "Customer Exclusive Data (CED)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, 0, 32), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta DECLINE_REQUIRED_BY_READER_INDICATOR_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Decline Required by Reader Indicator", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta DIRECTORY_ENTRY_61_KRN3 = new EMVTagMeta(DataKernelID.K3, "61", "Directory Entry", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta FDDA_VERSION_NUMBER_PART_OF_9F69_1_KRN3 = new EMVTagMeta(DataKernelID.K3, "PART_OF_9F69_1", "fDDA Version Number", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta FILE_CONTROL_INFORMATION_FCI_PROPRIETARY_TEMPLATE_A5_KRN3 = new EMVTagMeta(DataKernelID.K3, "A5", "File Control Information (FCI) Proprietary Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta FORM_FACTOR_INDICATOR_FFI_9F6E_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F6E", "Form Factor Indicator (FFI)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_CERTIFICATE_9F46_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F46", "Integrated Circuit Card (ICC) Public Key Certificate", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_EXPONENT_9F47_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F47", "Integrated Circuit Card (ICC) Public Key Exponent", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 1, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta INTEGRATED_DATA_STORAGE_DIRECTORY_IDSD_D2_KRN3 = new EMVTagMeta(DataKernelID.K3, "D2", "Integrated Data Storage Directory (IDSD)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta INTEGRATED_DATA_STORAGE_RECORD_UPDATE_TEMPLATE_BF60_KRN3 = new EMVTagMeta(DataKernelID.K3, "BF60", "Integrated Data Storage Record Update Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_CERTIFICATE_90_KRN3 = new EMVTagMeta(DataKernelID.K3, "90", "Issuer Public Key Certificate", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_EXPONENT_9F32_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F32", "Issuer Public Key Exponent", DataTemplate.None, new DataFormatterLengthList(DataFormats._BINARY, 1, 3), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta ISSUER_PUBLIC_KEY_REMAINDER_92_KRN3 = new EMVTagMeta(DataKernelID.K3, "92", "Issuer Public Key Remainder", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta ISSUER_SCRIPT_RESULTS_9F5B_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F5B", "Issuer Script Results", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta ONLINE_REQUIRED_BY_READER_INDICATOR_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Online Required by Reader Indicator", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta PROCESSING_OPTIONS_DATA_OBJECT_LIST_PDOL_9F38_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F38", "Processing Options Data Object List (PDOL)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta READER_CONTACTLESS_FLOOR_LIMIT_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Reader Contactless Floor Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta READER_CONTACTLESS_TRANSACTION_LIMIT_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Reader Contactless Transaction Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta READER_CVM_REQUIRED_LIMIT_INTERNAL_KRN3 = new EMVTagMeta(DataKernelID.K3, "INTERNAL", "Reader CVM Required Limit", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._NUMERIC, 6), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta RESPONSE_MESSAGE_TEMPLATE_FORMAT_1_80_KRN3 = new EMVTagMeta(DataKernelID.K3, "80", "Response Message Template Format 1", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta RESPONSE_MESSAGE_TEMPLATE_FORMAT_2_77_KRN3 = new EMVTagMeta(DataKernelID.K3, "77", "Response Message Template Format 2", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta STATIC_DATA_AUTHENTICATION_SDA_TAG_LIST_9F4A_KRN3 = new EMVTagMeta(DataKernelID.K3, "9F4A", "Static Data Authentication (SDA) Tag List", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        public static EMVTagMeta UNPREDICTABLE_NUMBER_CARD_PART_OF_9F69_2_KRN3 = new EMVTagMeta(DataKernelID.K3, "PART_OF_9F69_2", "Unpredictable Number (Card)", DataTemplate.None, new DataFormatterLengthFixed(DataFormats._BINARY, 4), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "");
        #endregion

        #region GlobalPlatform
        public static EMVTagMeta INSTALL_PARAM_OR_APPLICATION_CONTACTLESS_USAGE_C9_GP = new EMVTagMeta(DataKernelID.GP, "C9", "Install Parameter/Application Contactless Usage", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Install Parameter/Application Contactless Usage");
        public static EMVTagMeta STORE_DATE_70_GP = new EMVTagMeta(DataKernelID.GP, "70", "Store Data Template", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Store Data Template");
        public static EMVTagMeta CRM_COUNTRY_CODE_CB_GP = new EMVTagMeta(DataKernelID.GP, "CB", "CRM Country Code", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CRM Country Code");
        public static EMVTagMeta CRM_CURRENCY_CODE_CD_GP = new EMVTagMeta(DataKernelID.GP, "CD", "CRM Currency Code", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CRM Currency Code");
        public static EMVTagMeta APPLICATION_CONTROL_C1_GP = new EMVTagMeta(DataKernelID.GP, "C1", "Application Control", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Application Control");
        public static EMVTagMeta PREVIOUS_TRANSACTION_HISTORY_CA_GP = new EMVTagMeta(DataKernelID.GP, "CA", "Previous Transaction History", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Previous Transaction History");
        public static EMVTagMeta DEFAULT_CONTACT_PROFILE_C4_GP = new EMVTagMeta(DataKernelID.GP, "C4", "Default Contact Profile", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Default Contact Profile");
        public static EMVTagMeta DEFAULT_TTPI_C8_GP = new EMVTagMeta(DataKernelID.GP, "C8", "Default TTPI", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Default TTPI");
        public static EMVTagMeta APPLICATION_CONTACTLESS_USAGE_C9_GP = new EMVTagMeta(DataKernelID.GP, "C9", "Application Contactless Usage", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Application Contactless Usage");
        public static EMVTagMeta SECONDARY_CURRENCY_1_DF11_GP = new EMVTagMeta(DataKernelID.GP, "DF11", "Secondary Currency 1 [Conversion parameters]", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Secondary Currency 1 [Conversion parameters]");
        public static EMVTagMeta SECONDARY_CURRENCY_2_DF12_GP = new EMVTagMeta(DataKernelID.GP, "DF12", "Secondary Currency 2 [Conversion parameters]", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Secondary Currency 2 [Conversion parameters]");
        public static EMVTagMeta CONTACT_DERIVATION_KEY_INDEX_DF1E_GP = new EMVTagMeta(DataKernelID.GP, "DF1E", "Contact Derivation Key index", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contact Derivation Key index");
        public static EMVTagMeta CONTACTLESS_DERIVATION_KEY_DF1F_GP = new EMVTagMeta(DataKernelID.GP, "DF1F", "Contactless Derivation Key Index", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contactless Derivation Key Index");
        public static EMVTagMeta DDOL_RELATED_DATA_LENGTH_DF40_GP = new EMVTagMeta(DataKernelID.GP, "DF40", "DDOL Related Data Length", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "DDOL Related Data Length");
        public static EMVTagMeta CDOL2_RELATED_DATA_LENGTH_DF41_GP = new EMVTagMeta(DataKernelID.GP, "DF41", "CDOL2 Related Data Length", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CDOL2 Related Data Length");
        public static EMVTagMeta TRANSACTION_LOG_SETTINGS_DF4D_GP = new EMVTagMeta(DataKernelID.GP, "DF4D", "Transaction Log Settings", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Transaction Log Settings");
        public static EMVTagMeta ATC_LIMIT_DF30_GP = new EMVTagMeta(DataKernelID.GP, "DF30", "ATC Limit ", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "ATC Limit ");
        public static EMVTagMeta ENCRYPTED_PIN_CRYPTOGRAPHY_FAILURE_LIMIT_DF31_GP = new EMVTagMeta(DataKernelID.GP, "DF31", "Encrypted PIN cryptography failure limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Encrypted PIN cryptography failure limit");
        public static EMVTagMeta FAILED_MAC_LIMIT_DF32_GP = new EMVTagMeta(DataKernelID.GP, "DF32", "Failed MAC limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Encrypted PIN cryptography failure limit");
        public static EMVTagMeta LIFETIME_MAC_LIMIT_DF33_GP = new EMVTagMeta(DataKernelID.GP, "DF33", "Lifetime MAC Limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Lifetime MAC Limit");
        public static EMVTagMeta SESSION_MAC_LIMIT_DF34_GP = new EMVTagMeta(DataKernelID.GP, "DF34", "Session MAC Limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Session MAC Limit");
        public static EMVTagMeta CONTACT_PDOL_LENGTH_D3_GP = new EMVTagMeta(DataKernelID.GP, "D3", "Contact PDOL Length", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contact PDOL Length");
        public static EMVTagMeta CONTACTLESS_PDOL_LENGTH_D4_GP = new EMVTagMeta(DataKernelID.GP, "D4", "Contactless PDOL Length", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Contact PDOL Length");
        public static EMVTagMeta CAFL_D8_GP = new EMVTagMeta(DataKernelID.GP, "D8", "CAFL (Consolidated Application File Locator)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CAFL (Consolidated Application File Locator");
        public static EMVTagMeta CIAC_DF20_GP = new EMVTagMeta(DataKernelID.GP, "DF20", "CIAC CVM5", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CAFL (Consolidated Application File Locator");
        public static EMVTagMeta CIAC_DENIAL_DF15_GP = new EMVTagMeta(DataKernelID.GP, "DF15", "CIAC Denial", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CIAC Denial");
        public static EMVTagMeta CIAC_DEFAULT_DF16_GP = new EMVTagMeta(DataKernelID.GP, "DF16", "CIAC Default", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CIAC Default");
        public static EMVTagMeta CIAC_ONLINE_DF17_GP = new EMVTagMeta(DataKernelID.GP, "DF17", "CIAC Online", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "CIAC Online");
        public static EMVTagMeta COTN_DF13_GP = new EMVTagMeta(DataKernelID.GP, "DF13", "COTN (Consecutive Offline Transactions", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "COTN (Consecutive Offline Transactions");
        public static EMVTagMeta LCOL_DF1B_GP = new EMVTagMeta(DataKernelID.GP, "DF1B", "LCOL (Lower Consecutive Offline Limit)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "LCOL (Lower Consecutive Offline Limit");
        public static EMVTagMeta UCOL_DF1C_GP = new EMVTagMeta(DataKernelID.GP, "DF1C", "UCOL (Upper Consecutive Offline Limit)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "UCOL (Upper Consecutive Offline Limit");
        public static EMVTagMeta COTA_DF14_GP = new EMVTagMeta(DataKernelID.GP, "DF14", "COTA (Cumulative Offline Transaction Amount)", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "COTA (Cumulative Offline Transaction Amount");
        public static EMVTagMeta LCOTA_DF18_GP = new EMVTagMeta(DataKernelID.GP, "DF18", "LCOTA (Lower Cumulative Offline Transaction Amount) limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "LCOTA (Lower Cumulative Offline Transaction Amount) limit");
        public static EMVTagMeta UCOTA_DF19_GP = new EMVTagMeta(DataKernelID.GP, "DF19", "UCOTA (Upper Cumulative Offline Transaction Amount) limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "UCOTA (Upper Cumulative Offline Transaction Amount) limit");
        public static EMVTagMeta MTA_DF1A_GP = new EMVTagMeta(DataKernelID.GP, "DF1A", "MTA (Maximum Single Transaction Amount) limit", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "MTA (Maximum Single Transaction Amount) limit");
        public static EMVTagMeta IADOL5_DF1D_GP = new EMVTagMeta(DataKernelID.GP, "DF1D", "IADOL5", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "IADOL5");
        public static EMVTagMeta PROFILE_TEMPLATE_BF2E_GP = new EMVTagMeta(DataKernelID.GP, "BF2E", "Profile Template Contactless", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Profile Template Contactless");
        public static EMVTagMeta PROFILE_TEMPLATE_BF20_GP = new EMVTagMeta(DataKernelID.GP, "BF20", "Profile Template Contact", DataTemplate.None, new DataFormatterLengthRange(DataFormats._BINARY, -1, -1), new UpdatePermissionEnum[] { UpdatePermissionEnum.NONE }, "Profile Template Contact");
        #endregion

        static EMVTagsEnum()
        {
            DataKernelID = DataKernelID.KRN;

            #region Added
            EnumList.Add(CARD_ADDITIONAL_PROCESSES_9F68_KRN);
            #endregion

            #region Entry Point
            EnumList.Add(EXTENDED_SELECTION_9F29_KRN);
            EnumList.Add(KERNEL_IDENTIFIER_9F2A_KRN);
            #endregion

            #region KRN
            EnumList.Add(ACCOUNT_TYPE_5F57_KRN);
            EnumList.Add(ACQUIRER_IDENTIFIER_9F01_KRN);
            EnumList.Add(ADDITIONAL_TERMINAL_CAPABILITIES_9F40_KRN);
            EnumList.Add(AMOUNT_AUTHORISED_BINARY_81_KRN);
            EnumList.Add(AMOUNT_AUTHORISED_NUMERIC_9F02_KRN);
            EnumList.Add(AMOUNT_OTHER_BINARY_9F04_KRN);
            EnumList.Add(AMOUNT_OTHER_NUMERIC_9F03_KRN);
            EnumList.Add(AMOUNT_REFERENCE_CURRENCY_9F3A_KRN);
            EnumList.Add(APPLICATION_CRYPTOGRAM_9F26_KRN);
            EnumList.Add(APPLICATION_CURRENCY_CODE_9F42_KRN);
            EnumList.Add(APPLICATION_CURRENCY_EXPONENT_9F44_KRN);
            EnumList.Add(APPLICATION_DISCRETIONARY_DATA_9F05_KRN);
            EnumList.Add(APPLICATION_EFFECTIVE_DATE_5F25_KRN);
            EnumList.Add(APPLICATION_EXPIRATION_DATE_5F24_KRN);
            EnumList.Add(APPLICATION_FILE_LOCATOR_AFL_94_KRN);
            EnumList.Add(APPLICATION_DEDICATED_FILE_ADF_NAME_4F_KRN);
            EnumList.Add(APPLICATION_IDENTIFIER_AID_TERMINAL_9F06_KRN);
            EnumList.Add(APPLICATION_INTERCHANGE_PROFILE_82_KRN);
            EnumList.Add(APPLICATION_LABEL_50_KRN);
            EnumList.Add(APPLICATION_PREFERRED_NAME_9F12_KRN);
            EnumList.Add(APPLICATION_PRIMARY_ACCOUNT_NUMBER_PAN_5A_KRN);
            EnumList.Add(APPLICATION_PRIMARY_ACCOUNT_NUMBER_PAN_SEQUENCE_NUMBER_5F34_KRN);
            EnumList.Add(APPLICATION_PRIORITY_INDICATOR_87_KRN);
            EnumList.Add(APPLICATION_REFERENCE_CURRENCY_9F3B_KRN);
            EnumList.Add(APPLICATION_REFERENCE_CURRENCY_EXPONENT_9F43_KRN);
            EnumList.Add(APPLICATION_SELECTION_INDICATOR_INTERNAL_KRN);
            EnumList.Add(APPLICATION_TEMPLATE_61_KRN);
            EnumList.Add(APPLICATION_TRANSACTION_COUNTER_ATC_9F36_KRN);
            EnumList.Add(APPLICATION_USAGE_CONTROL_9F07_KRN);
            EnumList.Add(APPLICATION_VERSION_NUMBER_CARD_9F08_KRN);
            EnumList.Add(APPLICATION_VERSION_NUMBER_TERMINAL_9F09_KRN);
            EnumList.Add(AUTHORISATION_CODE_89_KRN);
            EnumList.Add(AUTHORISATION_RESPONSE_CODE_8A_KRN);
            EnumList.Add(AUTHORISATION_RESPONSE_CRYPTOGRAM_ARPC_INTERNAL_KRN);
            EnumList.Add(BANK_IDENTIFIER_CODE_BIC_5F54_KRN);
            EnumList.Add(CARD_RISK_MANAGEMENT_DATA_OBJECT_LIST_1_CDOL1_8C_KRN);
            EnumList.Add(CARD_RISK_MANAGEMENT_DATA_OBJECT_LIST_2_CDOL2_8D_KRN);
            EnumList.Add(CARD_STATUS_UPDATE_CSU_INTERNAL_KRN);
            EnumList.Add(CARDHOLDER_NAME_5F20_KRN);
            EnumList.Add(CARDHOLDER_NAME_EXTENDED_9F0B_KRN);
            EnumList.Add(CARDHOLDER_VERIFICATION_METHOD_CVM_LIST_8E_KRN);
            EnumList.Add(CARDHOLDER_VERIFICATION_METHOD_CVM_RESULTS_9F34_KRN);
            EnumList.Add(CERTIFICATION_AUTHORITY_PUBLIC_KEY_CHECK_SUM_INTERNAL_KRN);
            EnumList.Add(CERTIFICATION_AUTHORITY_PUBLIC_KEY_EXPONENT_INTERNAL_KRN);
            EnumList.Add(CERTIFICATION_AUTHORITY_PUBLIC_KEY_INDEX_8F_KRN);
            EnumList.Add(CERTIFICATION_AUTHORITY_PUBLIC_KEY_INDEX_9F22_KRN);
            EnumList.Add(CERTIFICATION_AUTHORITY_PUBLIC_KEY_MODULUS_INTERNAL_KRN);
            EnumList.Add(COMMAND_TEMPLATE_83_KRN);
            EnumList.Add(CRYPTOGRAM_INFORMATION_DATA_9F27_KRN);
            EnumList.Add(DATA_AUTHENTICATION_CODE_9F45_KRN);
            EnumList.Add(DEDICATED_FILE_DF_NAME_84_KRN);
            EnumList.Add(DEFAULT_DYNAMIC_DATA_AUTHENTICATION_DATA_OBJECT_LIST_DDOL_INTERNAL_KRN);
            EnumList.Add(DEFAULT_TRANSACTION_CERTIFICATE_DATA_OBJECT_LIST_TDOL_INTERNAL_KRN);
            EnumList.Add(DIRECTORY_DEFINITION_FILE_DDF_NAME_9D_KRN);
            EnumList.Add(DIRECTORY_DISCRETIONARY_TEMPLATE_73_KRN);
            EnumList.Add(DYNAMIC_DATA_AUTHENTICATION_DATA_OBJECT_LIST_DDOL_9F49_KRN);
            EnumList.Add(ENCIPHERED_PERSONAL_IDENTIFICATION_NUMBER_PIN_DATA_INTERNAL_KRN);
            EnumList.Add(FILE_CONTROL_INFORMATION_FCI_ISSUER_DISCRETIONARY_DATA_BF0C_KRN);
            EnumList.Add(FILE_CONTROL_INFORMATION_FCI_PROPRIETARY_TEMPLATE_A5_KRN);
            EnumList.Add(FILE_CONTROL_INFORMATION_FCI_TEMPLATE_6F_KRN);
            EnumList.Add(ICC_DYNAMIC_NUMBER_9F4C_KRN);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PIN_ENCIPHERMENT_PUBLIC_KEY_CERTIFICATE_9F2D_KRN);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PIN_ENCIPHERMENT_PUBLIC_KEY_EXPONENT_9F2E_KRN);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PIN_ENCIPHERMENT_PUBLIC_KEY_REMAINDER_9F2F_KRN);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_CERTIFICATE_9F46_KRN);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_EXPONENT_9F47_KRN);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_REMAINDER_9F48_KRN);
            EnumList.Add(INTERFACE_DEVICE_IFD_SERIAL_NUMBER_9F1E_KRN);
            EnumList.Add(INTERNATIONAL_BANK_ACCOUNT_NUMBER_IBAN_5F53_KRN);
            EnumList.Add(ISSUER_ACTION_CODE_DEFAULT_9F0D_KRN);
            EnumList.Add(ISSUER_ACTION_CODE_DENIAL_9F0E_KRN);
            EnumList.Add(ISSUER_ACTION_CODE_ONLINE_9F0F_KRN);
            EnumList.Add(ISSUER_APPLICATION_DATA_9F10_KRN);
            EnumList.Add(ISSUER_AUTHENTICATION_DATA_91_KRN);
            EnumList.Add(ISSUER_CODE_TABLE_INDEX_9F11_KRN);
            EnumList.Add(ISSUER_COUNTRY_CODE_5F28_KRN);
            EnumList.Add(ISSUER_COUNTRY_CODE_ALPHA2_FORMAT_5F55_KRN);
            EnumList.Add(ISSUER_COUNTRY_CODE_ALPHA3_FORMAT_5F56_KRN);
            EnumList.Add(ISSUER_IDENTIFICATION_NUMBER_IIN_42_KRN);
            EnumList.Add(ISSUER_PUBLIC_KEY_CERTIFICATE_90_KRN);
            EnumList.Add(ISSUER_PUBLIC_KEY_EXPONENT_9F32_KRN);
            EnumList.Add(ISSUER_PUBLIC_KEY_REMAINDER_92_KRN);
            EnumList.Add(ISSUER_SCRIPT_COMMAND_86_KRN);
            EnumList.Add(ISSUER_SCRIPT_IDENTIFIER_9F18_KRN);
            EnumList.Add(ISSUER_SCRIPT_RESULTS_INTERNAL_KRN);
            EnumList.Add(ISSUER_SCRIPT_TEMPLATE_1_71_KRN);
            EnumList.Add(ISSUER_SCRIPT_TEMPLATE_2_72_KRN);
            EnumList.Add(ISSUER_URL_5F50_KRN);
            EnumList.Add(LANGUAGE_PREFERENCE_5F2D_KRN);
            EnumList.Add(LAST_ONLINE_APPLICATION_TRANSACTION_COUNTER_ATC_REGISTER_9F13_KRN);
            EnumList.Add(LOG_ENTRY_9F4D_KRN);
            EnumList.Add(LOG_FORMAT_9F4F_KRN);
            EnumList.Add(LOWER_CONSECUTIVE_OFFLINE_LIMIT_9F14_KRN);
            EnumList.Add(MAXIMUM_TARGET_PERCENTAGE_TO_BE_USED_FOR_BIASED_RANDOM_SELECTION_INTERNAL_KRN);
            EnumList.Add(MERCHANT_CATEGORY_CODE_9F15_KRN);
            EnumList.Add(MERCHANT_IDENTIFIER_9F16_KRN);
            EnumList.Add(MERCHANT_NAME_AND_LOCATION_9F4E_KRN);
            EnumList.Add(MESSAGE_TYPE_INTERNAL_KRN);
            EnumList.Add(PERSONAL_IDENTIFICATION_NUMBER_PIN_PAD_SECRET_KEY_INTERNAL_KRN);
            EnumList.Add(PERSONAL_IDENTIFICATION_NUMBER_PIN_TRY_COUNTER_9F17_KRN);
            EnumList.Add(POINTOFSERVICE_POS_ENTRY_MODE_9F39_KRN);
            EnumList.Add(PROCESSING_OPTIONS_DATA_OBJECT_LIST_PDOL_9F38_KRN);
            EnumList.Add(PROPRIETARY_AUTHENTICATION_DATA_INTERNAL_KRN);
            EnumList.Add(READ_RECORD_RESPONSE_MESSAGE_TEMPLATE_70_KRN);
            EnumList.Add(RESPONSE_MESSAGE_TEMPLATE_FORMAT_1_80_KRN);
            EnumList.Add(RESPONSE_MESSAGE_TEMPLATE_FORMAT_2_77_KRN);
            EnumList.Add(SERVICE_CODE_5F30_KRN);
            EnumList.Add(SHORT_FILE_IDENTIFIER_SFI_88_KRN);
            EnumList.Add(SIGNED_DYNAMIC_APPLICATION_DATA_9F4B_KRN);
            EnumList.Add(SIGNED_STATIC_APPLICATION_DATA_93_KRN);
            EnumList.Add(STATIC_DATA_AUTHENTICATION_TAG_LIST_9F4A_KRN);
            EnumList.Add(TARGET_PERCENTAGE_TO_BE_USED_FOR_RANDOM_SELECTION_INTERNAL_KRN);
            EnumList.Add(TERMINAL_ACTION_CODE_DEFAULT_INTERNAL_KRN);
            EnumList.Add(TERMINAL_ACTION_CODE_DENIAL_INTERNAL_KRN);
            EnumList.Add(TERMINAL_ACTION_CODE_ONLINE_INTERNAL_KRN);
            EnumList.Add(TERMINAL_CAPABILITIES_9F33_KRN);
            EnumList.Add(TERMINAL_COUNTRY_CODE_9F1A_KRN);
            EnumList.Add(TERMINAL_FLOOR_LIMIT_9F1B_KRN);
            EnumList.Add(TERMINAL_IDENTIFICATION_9F1C_KRN);
            EnumList.Add(TERMINAL_RISK_MANAGEMENT_DATA_9F1D_KRN);
            EnumList.Add(TERMINAL_TYPE_9F35_KRN);
            EnumList.Add(TERMINAL_VERIFICATION_RESULTS_95_KRN);
            EnumList.Add(THRESHOLD_VALUE_FOR_BIASED_RANDOM_SELECTION_INTERNAL_KRN);
            EnumList.Add(TRACK_1_DISCRETIONARY_DATA_9F1F_KRN);
            EnumList.Add(TRACK_2_DISCRETIONARY_DATA_9F20_KRN);
            EnumList.Add(TRACK_2_EQUIVALENT_DATA_57_KRN);
            EnumList.Add(TRANSACTION_AMOUNT_INTERNAL_KRN);
            EnumList.Add(TRANSACTION_CERTIFICATE_DATA_OBJECT_LIST_TDOL_97_KRN);
            EnumList.Add(TRANSACTION_CERTIFICATE_TC_HASH_VALUE_98_KRN);
            EnumList.Add(TRANSACTION_CURRENCY_CODE_5F2A_KRN);
            EnumList.Add(TRANSACTION_CURRENCY_EXPONENT_5F36_KRN);
            EnumList.Add(TRANSACTION_DATE_9A_KRN);
            EnumList.Add(TRANSACTION_PERSONAL_IDENTIFICATION_NUMBER_PIN_DATA_99_KRN);
            EnumList.Add(TRANSACTION_REFERENCE_CURRENCY_CODE_9F3C_KRN);
            EnumList.Add(TRANSACTION_REFERENCE_CURRENCY_CONVERSION_INTERNAL_KRN);
            EnumList.Add(TRANSACTION_REFERENCE_CURRENCY_EXPONENT_9F3D_KRN);
            EnumList.Add(TRANSACTION_SEQUENCE_COUNTER_9F41_KRN);
            EnumList.Add(TRANSACTION_STATUS_INFORMATION_9B_KRN);
            EnumList.Add(TRANSACTION_TIME_9F21_KRN);
            EnumList.Add(TRANSACTION_TYPE_9C_KRN);
            EnumList.Add(UNPREDICTABLE_NUMBER_9F37_KRN);
            EnumList.Add(UPPER_CONSECUTIVE_OFFLINE_LIMIT_9F23_KRN);
            EnumList.Add(TERMINAL_TRANSACTION_QUALIFIERS_TTQ_9F66_KRN);
            EnumList.Add(PAYMENT_ACCOUNT_REFERENCE_9F24_KRN);
            #endregion
            #region KRN1
            EnumList.Add(VLP_ISSUER_AUTHORISATION_CODE_9F74_KRN1);
            EnumList.Add(VLP_TERMINAL_SUPPORT_INDICATOR_9F7A_KRN1);
            #endregion
            #region KRN2
            EnumList.Add(ACTIVE_AFL_INTERNAL_KRN2);
            EnumList.Add(ACTIVE_TAG_INTERNAL_KRN2);
            EnumList.Add(AC_TYPE_INTERNAL_KRN2);
            EnumList.Add(APPLICATION_CAPABILITIES_INFORMATION_9F5D_KRN2);
            EnumList.Add(APPLICATION_FILE_LOCATOR_94_KRN2);
            EnumList.Add(APPLICATION_LABEL_50_KRN2);
            EnumList.Add(APPLICATION_PREFERRED_NAME_9F12_KRN2);
            EnumList.Add(BALANCE_READ_BEFORE_GEN_AC_DF8104_KRN2);
            EnumList.Add(BALANCE_READ_AFTER_GEN_AC_DF8105_KRN2);
            EnumList.Add(CARD_DATA_INPUT_CAPABILITY_DF8117_KRN2);
            EnumList.Add(CDOL1_8C_KRN2);
            EnumList.Add(CDOL1_RELATED_DATA_DF8107_KRN2);
            EnumList.Add(CVC3_TRACK1_9F60_KRN2);
            EnumList.Add(CVC3_TRACK2_9F61_KRN2);
            EnumList.Add(CVM_CAPABILITY_CVM_REQUIRED_DF8118_KRN2);
            EnumList.Add(CVM_CAPABILITY_NO_CVM_REQUIRED_DF8119_KRN2);
            EnumList.Add(CVM_LIST_8E_KRN2);
            EnumList.Add(DATA_NEEDED_DF8106_KRN2);
            EnumList.Add(DATA_RECORD_FF8105_KRN2);
            EnumList.Add(DATA_TO_SEND_FF8104_KRN2);
            EnumList.Add(DD_CARD_TRACK1_DF812A_KRN2);
            EnumList.Add(DD_CARD_TRACK2_DF812B_KRN2);
            EnumList.Add(DEFAULT_UDOL_DF811A_KRN2);
            EnumList.Add(DEVICE_ESTIMATED_TRANSMISSION_TIME_FOR_RELAY_RESISTANCE_RAPDU_DF8305_KRN2);
            EnumList.Add(DEVICE_RELAY_RESISTANCE_ENTROPY_DF8302_KRN2);
            EnumList.Add(DISCRETIONARY_DATA_FF8106_KRN2);
            EnumList.Add(DRDOL_9F51_KRN2);
            EnumList.Add(DRDOL_RELATED_DATA_DF8113_KRN2);
            EnumList.Add(DS_AC_TYPE_DF8108_KRN2);
            EnumList.Add(DS_DIGEST_H_DF61_KRN2);
            EnumList.Add(DSDOL_9F5B_KRN2);
            EnumList.Add(DS_ID_9F5E_KRN2);
            EnumList.Add(DS_INPUT_CARD_DF60_KRN2);
            EnumList.Add(DS_INPUT_TERM_DF8109_KRN2);
            EnumList.Add(DS_ODS_CARD_9F54_KRN2);
            EnumList.Add(DS_ODS_INFO_DF62_KRN2);
            EnumList.Add(DS_ODS_INFO_FOR_READER_DF810A_KRN2);
            EnumList.Add(DS_ODS_TERM_DF63_KRN2);
            EnumList.Add(DS_REQUESTED_OPERATOR_ID_9F5C_KRN2);
            EnumList.Add(DS_SLOT_AVAILABILITY_9F5F_KRN2);
            EnumList.Add(DS_SLOT_MANAGEMENT_CONTROL_9F6F_KRN2);
            EnumList.Add(DS_SUMMARY_1_9F7D_KRN2);
            EnumList.Add(DS_SUMMARY_2_DF8101_KRN2);
            EnumList.Add(DS_SUMMARY_3_DF8102_KRN2);
            EnumList.Add(DS_SUMMARY_STATUS_DF810B_KRN2);
            EnumList.Add(DS_UNPREDICTABLE_NUMBER_9F7F_KRN2);
            EnumList.Add(DSVN_TERM_DF810D_KRN2);
            EnumList.Add(ERROR_INDICATION_DF8115_KRN2);
            EnumList.Add(FAILED_MS_CNTR_INTERNAL_KRN2);
            EnumList.Add(FILE_CONTROL_INFORMATION_ISSUER_DISCRETIONARY_DATA_BF0C_KRN2);
            EnumList.Add(FILE_CONTROL_INFORMATION_TEMPLATE_6F_KRN2);
            EnumList.Add(HOLD_TIME_VALUE_DF8130_KRN2);
            EnumList.Add(ICC_PUBLIC_KEY_EXPONENT_9F47_KRN2);
            EnumList.Add(IDS_STATUS_DF8128_KRN2);
            EnumList.Add(ISSUER_PUBLIC_KEY_EXPONENT_9F32_KRN2);
            EnumList.Add(KERNEL_CONFIGURATION_DF811B_KRN2);
            EnumList.Add(KERNEL_ID_DF810C_KRN2);
            EnumList.Add(MAGSTRIPE_APPLICATION_VERSION_NUMBER_READER_9F6D_KRN2);
            EnumList.Add(MAGSTRIPE_CVM_CAPABILITY_CVM_REQUIRED_DF811E_KRN2);
            EnumList.Add(MAGSTRIPE_CVM_CAPABILITY_NO_CVM_REQUIRED_DF812C_KRN2);
            EnumList.Add(MAXIMUM_RELAY_RESISTANCE_GRACE_PERIOD_DF8133_KRN2);
            EnumList.Add(MAX_TIME_FOR_PROCESSING_RELAY_RESISTANCE_APDU_DF8304_KRN2);
            EnumList.Add(MAX_LIFETIME_OF_TORN_TRANSACTION_LOG_RECORD_DF811C_KRN2);
            EnumList.Add(MAX_NUMBER_OF_TORN_TRANSACTION_LOG_RECORDS_DF811D_KRN2);
            EnumList.Add(MEASURED_RELAY_RESISTANCE_PROCESSING_TIME_DF8306_KRN2);
            EnumList.Add(MERCHANT_CUSTOM_DATA_9F7C_KRN2);
            EnumList.Add(MESSAGE_HOLD_TIME_DF812D_KRN2);
            EnumList.Add(MINIMUM_RELAY_RESISTANCE_GRACE_PERIOD_DF8132_KRN2);
            EnumList.Add(MIN_TIME_FOR_PROCESSING_RELAY_RESISTANCE_APDU_DF8303_KRN2);
            EnumList.Add(MOBILE_SUPPORT_INDICATOR_9F7E_KRN2);
            EnumList.Add(NATC_TRACK1_9F64_KRN2);
            EnumList.Add(NATC_TRACK2_9F67_KRN2);
            EnumList.Add(NEXT_CMD_INTERNAL_KRN2);
            EnumList.Add(NUN_INTERNAL_KRN2);
            EnumList.Add(ODA_STATUS_INTERNAL_KRN2);
            EnumList.Add(OFFLINE_ACCUMULATOR_BALANCE_9F50_KRN2);
            EnumList.Add(OUTCOME_PARAMETER_SET_DF8129_KRN2);
            EnumList.Add(PCVC3_TRACK1_9F62_KRN2);
            EnumList.Add(PCVC3_TRACK2_9F65_KRN2);
            EnumList.Add(PDOL_RELATED_DATA_DF8111_KRN2);
            EnumList.Add(PHONE_MESSAGE_TABLE_DF8131_KRN2);
            EnumList.Add(POS_CARDHOLDER_INTERACTION_INFORMATION_DF4B_KRN2);
            EnumList.Add(POSTGEN_AC_PUT_DATA_STATUS_DF810E_KRN2);
            EnumList.Add(PREGEN_AC_PUT_DATA_STATUS_DF810F_KRN2);
            EnumList.Add(PROCEED_TO_FIRST_WRITE_FLAG_DF8110_KRN2);
            EnumList.Add(PROTECTED_DATA_ENVELOPE_1_9F70_KRN2);
            EnumList.Add(PROTECTED_DATA_ENVELOPE_2_9F71_KRN2);
            EnumList.Add(PROTECTED_DATA_ENVELOPE_3_9F72_KRN2);
            EnumList.Add(PROTECTED_DATA_ENVELOPE_4_9F73_KRN2);
            EnumList.Add(PROTECTED_DATA_ENVELOPE_5_9F74_KRN2);
            EnumList.Add(PUNATC_TRACK1_9F63_KRN2);
            EnumList.Add(PUNATC_TRACK2_9F66_KRN2);
            EnumList.Add(READER_CONTACTLESS_FLOOR_LIMIT_DF8123_KRN2);
            EnumList.Add(READER_CONTACTLESS_TRANSACTION_LIMIT_INTERNAL_KRN2);
            EnumList.Add(READER_CONTACTLESS_TRANSACTION_LIMIT_NO_ONDEVICE_CVM_DF8124_KRN2);
            EnumList.Add(READER_CONTACTLESS_TRANSACTION_LIMIT_ONDEVICE_CVM_DF8125_KRN2);
            EnumList.Add(READER_CVM_REQUIRED_LIMIT_DF8126_KRN2);
            EnumList.Add(READ_RECORD_RESPONSE_MESSAGE_TEMPLATE_70_KRN2);
            EnumList.Add(REFERENCE_CONTROL_PARAMETER_DF8114_KRN2);
            EnumList.Add(RELAY_RESISTANCE_ACCURACY_THRESHOLD_DF8136_KRN2);
            EnumList.Add(RELAY_RESISTANCE_TRANSMISSION_TIME_MISMATCH_THRESHOLD_DF8137_KRN2);
            EnumList.Add(RRP_COUNTER_DF8307_KRN2);
            EnumList.Add(SECURITY_CAPABILITY_DF811F_KRN2);
            EnumList.Add(STATIC_DATA_TO_BE_AUTHENTICATED_INTERNAL_KRN2);
            EnumList.Add(TAGS_TO_READ_DF8112_KRN2);
            EnumList.Add(TAGS_TO_READ_YET_INTERNAL_KRN2);
            EnumList.Add(TAGS_TO_WRITE_AFTER_GEN_AC_FF8103_KRN2);
            EnumList.Add(TAGS_TO_WRITE_BEFORE_GEN_AC_FF8102_KRN2);
            EnumList.Add(TAGS_TO_WRITE_YET_AFTER_GEN_AC_INTERNAL_KRN2);
            EnumList.Add(TAGS_TO_WRITE_YET_BEFORE_GEN_AC_INTERNAL_KRN2);
            EnumList.Add(TERMINAL_ACTION_CODE_DEFAULT_DF8120_KRN2);
            EnumList.Add(TERMINAL_ACTION_CODE_DENIAL_DF8121_KRN2);
            EnumList.Add(TERMINAL_ACTION_CODE_ONLINE_DF8122_KRN2);
            EnumList.Add(TERMINAL_EXPECTED_TRANSMISSION_TIME_FOR_RELAY_RESISTANCE_CAPDU_DF8134_KRN2);
            EnumList.Add(TERMINAL_EXPECTED_TRANSMISSION_TIME_FOR_RELAY_RESISTANCE_RAPDU_DF8135_KRN2);
            EnumList.Add(TERMINAL_RELAY_RESISTANCE_ENTROPY_DF8301_KRN2);
            EnumList.Add(TERMINAL_RISK_MANAGEMENT_DATA_9F1D_KRN2);
            EnumList.Add(THIRD_PARTY_DATA_9F6E_KRN2);
            EnumList.Add(TIME_OUT_VALUE_DF8127_KRN2);
            EnumList.Add(TORN_ENTRY_INTERNAL_KRN2);
            EnumList.Add(TORN_RECORD_FF8101_KRN2);
            EnumList.Add(TORN_TEMP_RECORD_INTERNAL_KRN2);
            EnumList.Add(TRACK_1_DATA_56_KRN2);
            EnumList.Add(TRACK_2_DATA_9F6B_KRN2);
            EnumList.Add(TRANSACTION_CATEGORY_CODE_9F53_KRN2);
            EnumList.Add(UDOL_9F69_KRN2);
            EnumList.Add(UNPREDICTABLE_NUMBER_NUMERIC_9F6A_KRN2);
            EnumList.Add(UNPROTECTED_DATA_ENVELOPE_1_9F75_KRN2);
            EnumList.Add(UNPROTECTED_DATA_ENVELOPE_2_9F76_KRN2);
            EnumList.Add(UNPROTECTED_DATA_ENVELOPE_3_9F77_KRN2);
            EnumList.Add(UNPROTECTED_DATA_ENVELOPE_4_9F78_KRN2);
            EnumList.Add(UNPROTECTED_DATA_ENVELOPE_5_9F79_KRN2);
            EnumList.Add(USER_INTERFACE_REQUEST_DATA_DF8116_KRN2);
            #endregion
            #region KRN3
            EnumList.Add(APPLICATION_PROGRAM_IDENTIFIER_PROGRAM_ID_9F5A_KRN3);
            EnumList.Add(APPLICATION_SELECTION_REGISTERED_PROPRIETARY_DATA_ASRPD_9F0A_KRN3);
            EnumList.Add(AUTHORISATION_CODE_89_KRN3);
            EnumList.Add(AVAILABLE_OFFLINE_SPENDING_AMOUNT_AOSA_9F5D_KRN3);
            EnumList.Add(CARD_AUTHENTICATION_RELATED_DATA_9F69_KRN3);
            EnumList.Add(CARD_TRANSACTION_QUALIFIERS_CTQ_9F6C_KRN3);
            EnumList.Add(CERTIFICATE_AUTHORITY_PUBLIC_KEY_INTERNAL_KRN3);
            EnumList.Add(CERTIFICATE_AUTHORITY_PUBLIC_KEY_CHECK_SUM_INTERNAL_KRN3);
            EnumList.Add(CERTIFICATE_AUTHORITY_PUBLIC_KEY_EXPONENT_INTERNAL_KRN3);
            EnumList.Add(CERTIFICATE_AUTHORITY_PUBLIC_KEY_MODULUS_INTERNAL_KRN3);
            EnumList.Add(CUSTOMER_EXCLUSIVE_DATA_CED_9F7C_KRN3);
            EnumList.Add(DECLINE_REQUIRED_BY_READER_INDICATOR_INTERNAL_KRN3);
            EnumList.Add(DIRECTORY_ENTRY_61_KRN3);
            EnumList.Add(FDDA_VERSION_NUMBER_PART_OF_9F69_1_KRN3);
            EnumList.Add(FILE_CONTROL_INFORMATION_FCI_PROPRIETARY_TEMPLATE_A5_KRN3);
            EnumList.Add(FORM_FACTOR_INDICATOR_FFI_9F6E_KRN3);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_CERTIFICATE_9F46_KRN3);
            EnumList.Add(INTEGRATED_CIRCUIT_CARD_ICC_PUBLIC_KEY_EXPONENT_9F47_KRN3);
            EnumList.Add(INTEGRATED_DATA_STORAGE_DIRECTORY_IDSD_D2_KRN3);
            EnumList.Add(INTEGRATED_DATA_STORAGE_RECORD_UPDATE_TEMPLATE_BF60_KRN3);
            EnumList.Add(ISSUER_PUBLIC_KEY_CERTIFICATE_90_KRN3);
            EnumList.Add(ISSUER_PUBLIC_KEY_EXPONENT_9F32_KRN3);
            EnumList.Add(ISSUER_PUBLIC_KEY_REMAINDER_92_KRN3);
            EnumList.Add(ISSUER_SCRIPT_RESULTS_9F5B_KRN3);
            EnumList.Add(ONLINE_REQUIRED_BY_READER_INDICATOR_INTERNAL_KRN3);
            EnumList.Add(PROCESSING_OPTIONS_DATA_OBJECT_LIST_PDOL_9F38_KRN3);
            EnumList.Add(READER_CONTACTLESS_FLOOR_LIMIT_INTERNAL_KRN3);
            EnumList.Add(READER_CONTACTLESS_TRANSACTION_LIMIT_INTERNAL_KRN3);
            EnumList.Add(READER_CVM_REQUIRED_LIMIT_INTERNAL_KRN3);
            EnumList.Add(RESPONSE_MESSAGE_TEMPLATE_FORMAT_1_80_KRN3);
            EnumList.Add(RESPONSE_MESSAGE_TEMPLATE_FORMAT_2_77_KRN3);
            EnumList.Add(STATIC_DATA_AUTHENTICATION_SDA_TAG_LIST_9F4A_KRN3);
            EnumList.Add(UNPREDICTABLE_NUMBER_CARD_PART_OF_9F69_2_KRN3);
            #endregion

            #region GlobalPlatform
            EnumList.Add(INSTALL_PARAM_OR_APPLICATION_CONTACTLESS_USAGE_C9_GP);
            EnumList.Add(STORE_DATE_70_GP);
            EnumList.Add(CRM_COUNTRY_CODE_CB_GP);
            EnumList.Add(CRM_CURRENCY_CODE_CD_GP);
            EnumList.Add(APPLICATION_CONTROL_C1_GP);
            EnumList.Add(PREVIOUS_TRANSACTION_HISTORY_CA_GP);
            EnumList.Add(DEFAULT_CONTACT_PROFILE_C4_GP);
            EnumList.Add(DEFAULT_TTPI_C8_GP);
            EnumList.Add(APPLICATION_CONTACTLESS_USAGE_C9_GP);
            EnumList.Add(SECONDARY_CURRENCY_1_DF11_GP);
            EnumList.Add(SECONDARY_CURRENCY_2_DF12_GP);
            EnumList.Add(CONTACT_DERIVATION_KEY_INDEX_DF1E_GP);
            EnumList.Add(CONTACTLESS_DERIVATION_KEY_DF1F_GP);
            EnumList.Add(DDOL_RELATED_DATA_LENGTH_DF40_GP);
            EnumList.Add(CDOL2_RELATED_DATA_LENGTH_DF41_GP);
            EnumList.Add(TRANSACTION_LOG_SETTINGS_DF4D_GP);
            EnumList.Add(ATC_LIMIT_DF30_GP);
            EnumList.Add(ENCRYPTED_PIN_CRYPTOGRAPHY_FAILURE_LIMIT_DF31_GP);
            EnumList.Add(FAILED_MAC_LIMIT_DF32_GP);
            EnumList.Add(LIFETIME_MAC_LIMIT_DF33_GP);
            EnumList.Add(SESSION_MAC_LIMIT_DF34_GP);
            EnumList.Add(CONTACT_PDOL_LENGTH_D3_GP);
            EnumList.Add(CONTACTLESS_PDOL_LENGTH_D4_GP);
            EnumList.Add(CAFL_D8_GP);
            EnumList.Add(CIAC_DF20_GP);
            EnumList.Add(CIAC_DENIAL_DF15_GP);
            EnumList.Add(CIAC_DEFAULT_DF16_GP);
            EnumList.Add(CIAC_ONLINE_DF17_GP);
            EnumList.Add(COTN_DF13_GP);
            EnumList.Add(LCOL_DF1B_GP);
            EnumList.Add(UCOL_DF1C_GP);
            EnumList.Add(COTA_DF14_GP);
            EnumList.Add(LCOTA_DF18_GP);
            EnumList.Add(UCOTA_DF19_GP);
            EnumList.Add(MTA_DF1A_GP);
            EnumList.Add(IADOL5_DF1D_GP);
            EnumList.Add(PROFILE_TEMPLATE_BF2E_GP);
            EnumList.Add(PROFILE_TEMPLATE_BF20_GP);
            
            #endregion
        }

        private static EMVTagMeta GetMeta(string tagLabel)
        {
            if (DataKernelID == DataKernelID.KRN)
            {
                EMVTagMeta meta = EnumList.Find(x => x.Tag == tagLabel && x.KernelId == DataKernelID);

                //TODO: temp
                if (meta == null)
                    meta = EnumList.Find(x => x.Tag == tagLabel && x.KernelId == DataKernelID.K2);

                if (meta == null)
                    return UNKNOWN_KRN;// throw new EMVProtocolException("GetMeta, could not find meta class for:" + tagLabel);

                return meta;
            }
            else
            {
                EMVTagMeta meta = EnumList.Find(x => x.Tag == tagLabel && x.KernelId == DataKernelID);

                if (meta == null)
                    meta = EnumList.Find(x => x.Tag == tagLabel && x.KernelId == DataKernelID.KRN);

                //TODO: temp
                if (meta == null)
                    meta = EnumList.Find(x => x.Tag == tagLabel && x.KernelId == DataKernelID.K2);

                if (meta == null)
                    return UNKNOWN_KRN;//throw new EMVProtocolException("GetMeta, could not find meta class for:" + tagLabel);
                return meta;
            }
        }
        public static DataFormatterBase GetFormatter(string tag)
        {
            return GetMeta(tag).DataFormatter;
        }
        public static string GetName(string tag)
        {
            EMVTagMeta meta = GetMeta(tag);
            if (meta == null)
                return null;
            else
                return meta.Name;
        }
        public static bool CompareTemplate(string tagLabel, string templateLabel)
        {
            EMVTagMeta res = GetMeta(tagLabel);
            if (res == null)
                throw new EMVProtocolException("EMVTagMeta not found for " + tagLabel);
            else
            {
                if (res.Template.ToString().Contains(templateLabel))
                    return true;
                else
                    return false;
            }
        }
        public static bool DoesTagIncludesPermission(string tagLabel, UpdatePermissionEnum input)
        {
            EMVTagMeta res = GetMeta(tagLabel);
            if (res == null)
                throw new EMVProtocolException("EMVTagMeta not found for " + tagLabel);

            foreach (UpdatePermissionEnum permission in res.Permissions)
            {
                if (permission == UpdatePermissionEnum.NONE)
                    return true;

                if (permission == input)
                    return true;
            }
            return false;
        }
    }
}
