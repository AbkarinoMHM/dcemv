<?xml version="1.0" encoding="utf-8" ?>
<!--
*************************************************************************
DC EMV
Open Source EMV
Copyright (C) 2018  Vicente Da Silva

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, either version 3 of the License, or
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see http://www.gnu.org/licenses/
*************************************************************************
-->
<local:ModalPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="DCEMV.DemoApp.RegisterView"
             xmlns:local="clr-namespace:DCEMV.DemoApp" xmlns:common="clr-namespace:DCEMV.TerminalCommon;assembly=DCEMV_TerminalCommon"  >

    <local:ModalPage.Resources>
        <ResourceDictionary>

        </ResourceDictionary>
    </local:ModalPage.Resources>

    <local:ModalPage.Content>
        <Grid HorizontalOptions="FillAndExpand">

            <Grid Margin="50" HorizontalOptions="FillAndExpand" VerticalOptions="FillAndExpand">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition />
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="200"></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.ColumnSpan="3" Text="Register" FontSize="Large"/>

                <Entry Grid.Row="1" Grid.Column="0" Keyboard="Email" Placeholder="Email" Text="" x:Name="txtEmail">
                    <Entry.Behaviors>
                        <common:EmailValidatorBehavior x:Name="emailValidator"/>
                    </Entry.Behaviors>
                </Entry>
                <Image Grid.Row="1" Grid.Column="1" Style="{Binding Source={x:Reference emailValidator}, Path=IsValid, Converter={StaticResource boolToStyleImage}}">
                    <Image.Triggers>
                        <MultiTrigger TargetType="Image">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference txtEmail}, Path=Text }" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="IsVisible" Value="False" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Image.Triggers>
                </Image>
                <Label Grid.Row="1" Grid.Column="2" Style="{Binding Source={x:Reference emailValidator}, Path=IsValid, Converter={StaticResource boolToStyleEmail}}">
                    <Label.Triggers>
                        <MultiTrigger TargetType="Label">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference txtEmail}, Path=Text }" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="IsVisible" Value="False" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Label.Triggers>
                </Label>

                <Entry Grid.Row="2" Placeholder="Password" x:Name="txtPassword" Text="" IsPassword="True">
                    <Entry.Behaviors>
                        <common:PasswordValidatorBehavior x:Name="passwordValidator"/>
                    </Entry.Behaviors>
                </Entry>
                <Image Grid.Row="2" Grid.Column="1" Style="{Binding Source={x:Reference passwordValidator}, Path=IsValid, Converter={StaticResource boolToStyleImage}}">
                    <Image.Triggers>
                        <MultiTrigger TargetType="Image">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference txtPassword}, Path=Text }" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="IsVisible" Value="False" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Image.Triggers>
                </Image>
                <Label Grid.Row="2" Grid.Column="2" Style="{Binding Source={x:Reference passwordValidator}, Path=IsValid, Converter={StaticResource boolToStylePassword}}">
                    <Label.Triggers>
                        <MultiTrigger TargetType="Label">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference txtPassword}, Path=Text }" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="IsVisible" Value="False" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Label.Triggers>
                </Label>


                <Entry Grid.Row="3" Placeholder="Confirm Password" x:Name="txtConfirmPassword" Text="" IsPassword="True">
                    <Entry.Behaviors>
                        <common:CompareValidatorBehavior x:Name="confirmPasswordValidator" CompareToEntry="{Binding Source={x:Reference txtPassword}}" />
                    </Entry.Behaviors>
                </Entry>
                <Image Grid.Row="3" Grid.Column="1" Style="{Binding Source={x:Reference confirmPasswordValidator}, Path=IsValid, Converter={StaticResource boolToStyleImage}}">
                    <Image.Triggers>
                        <MultiTrigger TargetType="Image">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference txtConfirmPassword}, Path=Text }" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="IsVisible" Value="False" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Image.Triggers>
                </Image>
                <Label Grid.Row="3" Grid.Column="2" Style="{Binding Source={x:Reference confirmPasswordValidator}, Path=IsValid, Converter={StaticResource boolToStyleConfirmPassword}}">
                    <Label.Triggers>
                        <MultiTrigger TargetType="Label">
                            <MultiTrigger.Conditions>
                                <BindingCondition Binding="{Binding Source={x:Reference txtConfirmPassword}, Path=Text }" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="IsVisible" Value="False" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </Label.Triggers>
                </Label>


                <StackLayout Grid.Row="4" Grid.ColumnSpan="3" Orientation="Vertical">
                <Label >
                    <Label.Text>The password must forefill the following requirements:</Label.Text>
                </Label>
                <Label  >
                    <Label.Text>1) at least 1 upper case character</Label.Text>
                </Label>
                <Label  >
                    <Label.Text>2) at least 1 lower case character</Label.Text>
                </Label>
                <Label >
                    <Label.Text>3) at least 1 numerical character</Label.Text>
                </Label>
                <Label  >
                    <Label.Text>4) at least 1 special character</Label.Text>
                </Label>
                <Label>
                    <Label.Text>The length must be between 6 and 10 characters</Label.Text>
                </Label>
                </StackLayout>

                <Grid Grid.Row="6" Grid.ColumnSpan="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Button Grid.Column="0" x:Name="cmdOk" Clicked="cmdOk_Clicked" Text="ok" Style="{StaticResource styleButton}" IsEnabled="False">
                        <Button.Triggers>
                            <MultiTrigger TargetType="Button">
                                <MultiTrigger.Conditions>
                                    <BindingCondition Binding="{Binding Source={x:Reference emailValidator}, Path=IsValid }" Value="true" />
                                    <BindingCondition Binding="{Binding Source={x:Reference passwordValidator}, Path=IsValid }" Value="true" />
                                    <BindingCondition Binding="{Binding Source={x:Reference confirmPasswordValidator}, Path=IsValid}" Value="true" />
                                </MultiTrigger.Conditions>
                                <MultiTrigger.Setters>
                                    <Setter Property="IsEnabled" Value="True" />
                                </MultiTrigger.Setters>
                            </MultiTrigger>
                        </Button.Triggers>
                    </Button>
                    <Button Grid.Column="1" x:Name="cmdCancel" Clicked="cmdCancel_Clicked" Text="cancel" Style="{StaticResource styleButton}"></Button>
                </Grid>


            </Grid>

            <common:WaitControl x:Name="gridProgress">

            </common:WaitControl>

        </Grid>
    </local:ModalPage.Content>
</local:ModalPage>